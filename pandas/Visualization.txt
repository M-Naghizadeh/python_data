
   #[1]Index [2]Search [3]Table Visualization [4]Nullable Boolean data
   type

   [5]logo
   (BUTTON)
     * [6]Getting started
     * [7]User Guide
     * [8]API reference
     * [9]Development
     * [10]Release notes

     * [11]GitHub
     * [12]Twitter

   ____________________

     * [13]10 minutes to pandas
     * [14]Intro to data structures
     * [15]Essential basic functionality
     * [16]IO tools (text, CSV, HDF5, …)
     * [17]Indexing and selecting data
     * [18]MultiIndex / advanced indexing
     * [19]Merge, join, concatenate and compare
     * [20]Reshaping and pivot tables
     * [21]Working with text data
     * [22]Working with missing data
     * [23]Duplicate Labels
     * [24]Categorical data
     * [25]Nullable integer data type
     * [26]Nullable Boolean data type
     * [27]Chart Visualization
     * [28]Table Visualization
     * [29]Computational tools
     * [30]Group by: split-apply-combine
     * [31]Windowing Operations
     * [32]Time series / date functionality
     * [33]Time deltas
     * [34]Options and settings
     * [35]Enhancing performance
     * [36]Scaling to large datasets
     * [37]Sparse data structures
     * [38]Frequently Asked Questions (FAQ)
     * [39]Cookbook

   On this page

     * [40]Basic plotting: plot
     * [41]Other plots
          + [42]Bar plots
          + [43]Histograms
          + [44]Box plots
          + [45]Area plot
          + [46]Scatter plot
          + [47]Hexagonal bin plot
          + [48]Pie plot
     * [49]Plotting with missing data
     * [50]Plotting tools
          + [51]Scatter matrix plot
          + [52]Density plot
          + [53]Andrews curves
          + [54]Parallel coordinates
          + [55]Lag plot
          + [56]Autocorrelation plot
          + [57]Bootstrap plot
          + [58]RadViz
     * [59]Plot formatting
          + [60]Setting the plot style
          + [61]General plot style arguments
          + [62]Controlling the legend
          + [63]Controlling the labels
          + [64]Scales
          + [65]Plotting on a secondary y-axis
          + [66]Custom formatters for timeseries plots
          + [67]Suppressing tick resolution adjustment
          + [68]Automatic date tick adjustment
          + [69]Subplots
          + [70]Using layout and targeting multiple axes
          + [71]Plotting with error bars
          + [72]Plotting tables
          + [73]Colormaps
     * [74]Plotting directly with matplotlib
     * [75]Plotting backends

Chart Visualization[76]¶

   This section demonstrates visualization through charting. For
   information on visualization of tabular data please see the section on
   [77]Table Visualization.

   We use the standard convention for referencing the matplotlib API:
   
In [1]: import matplotlib.pyplot as plt

In [2]: plt.close("all")

   We provide the basics in pandas to easily create decent looking plots.
   See the [78]ecosystem section for visualization libraries that go
   beyond the basics documented here.

   Note

   All calls to np.random are seeded with 123456.

Basic plotting: plot[79]¶

   We will demonstrate the basics, see the [80]cookbook for some advanced
   strategies.

   The plot method on Series and DataFrame is just a simple wrapper around
   [81]plt.plot():
   
In [3]: ts = pd.Series(np.random.randn(1000), index=pd.date_range("1/1/2000", periods=1000))

In [4]: ts = ts.cumsum()

In [5]: ts.plot();

   ../_images/series_plot_basic.png

   If the index consists of dates, it calls [82]gcf().autofmt_xdate() to
   try to format the x-axis nicely as per above.

   On DataFrame, [83]plot() is a convenience to plot all of the columns
   with labels:
   
In [6]: df = pd.DataFrame(np.random.randn(1000, 4), index=ts.index, columns=list("ABCD"))

In [7]: df = df.cumsum()

In [8]: plt.figure();

In [9]: df.plot();

   ../_images/frame_plot_basic.png

   You can plot one column versus another using the x and y keywords in
   [84]plot():
In [10]: df3 = pd.DataFrame(np.random.randn(1000, 2), columns=["B", "C"]).cumsum()

In [11]: df3["A"] = pd.Series(list(range(len(df))))

In [12]: df3.plot(x="A", y="B");

   ../_images/df_plot_xy.png

   Note

   For more formatting and styling options, see [85]formatting below.

Other plots[86]¶

   Plotting methods allow for a handful of plot styles other than the
   default line plot. These methods can be provided as the kind keyword
   argument to [87]plot(), and include:
     * [88]‘bar’ or [89]‘barh’ for bar plots
     * [90]‘hist’ for histogram
     * [91]‘box’ for boxplot
     * [92]‘kde’ or [93]‘density’ for density plots
     * [94]‘area’ for area plots
     * [95]‘scatter’ for scatter plots
     * [96]‘hexbin’ for hexagonal bin plots
     * [97]‘pie’ for pie plots

   For example, a bar plot can be created the following way:
In [13]: plt.figure();

In [14]: df.iloc[5].plot(kind="bar");

   ../_images/bar_plot_ex.png

   You can also create these other plots using the methods
   DataFrame.plot.<kind> instead of providing the kind keyword argument.
   This makes it easier to discover plot methods and the specific
   arguments they use:
In [15]: df = pd.DataFrame()

In [16]: df.plot.<TAB>  # noqa: E225, E999
df.plot.area     df.plot.barh     df.plot.density  df.plot.hist     df.plot.line
     df.plot.scatter
df.plot.bar      df.plot.box      df.plot.hexbin   df.plot.kde      df.plot.pie

   In addition to these kind s, there are the [98]DataFrame.hist(), and
   [99]DataFrame.boxplot() methods, which use a separate interface.

   Finally, there are several [100]plotting functions in pandas.plotting
   that take a [101]Series or [102]DataFrame as an argument. These
   include:
     * [103]Scatter Matrix
     * [104]Andrews Curves
     * [105]Parallel Coordinates
     * [106]Lag Plot
     * [107]Autocorrelation Plot
     * [108]Bootstrap Plot
     * [109]RadViz

   Plots may also be adorned with [110]errorbars or [111]tables.

Bar plots[112]¶

   For labeled, non-time series data, you may wish to produce a bar plot:
In [17]: plt.figure();

In [18]: df.iloc[5].plot.bar();

In [19]: plt.axhline(0, color="k");

   ../_images/bar_plot_ex.png

   Calling a DataFrame’s [113]plot.bar() method produces a multiple bar
   plot:
In [20]: df2 = pd.DataFrame(np.random.rand(10, 4), columns=["a", "b", "c", "d"])

In [21]: df2.plot.bar();

   ../_images/bar_plot_multi_ex.png

   To produce a stacked bar plot, pass stacked=True:
In [22]: df2.plot.bar(stacked=True);

   ../_images/bar_plot_stacked_ex.png

   To get horizontal bar plots, use the barh method:
In [23]: df2.plot.barh(stacked=True);

   ../_images/barh_plot_stacked_ex.png

Histograms[114]¶

   Histograms can be drawn by using the [115]DataFrame.plot.hist() and
   [116]Series.plot.hist() methods.
In [24]: df4 = pd.DataFrame(
   ....:     {
   ....:         "a": np.random.randn(1000) + 1,
   ....:         "b": np.random.randn(1000),
   ....:         "c": np.random.randn(1000) - 1,
   ....:     },
   ....:     columns=["a", "b", "c"],
   ....: )
   ....:

In [25]: plt.figure();

In [26]: df4.plot.hist(alpha=0.5);

   ../_images/hist_new.png

   A histogram can be stacked using stacked=True. Bin size can be changed
   using the bins keyword.
In [27]: plt.figure();

In [28]: df4.plot.hist(stacked=True, bins=20);

   ../_images/hist_new_stacked.png

   You can pass other keywords supported by matplotlib hist. For example,
   horizontal and cumulative histograms can be drawn by
   orientation='horizontal' and cumulative=True.
In [29]: plt.figure();

In [30]: df4["a"].plot.hist(orientation="horizontal", cumulative=True);

   ../_images/hist_new_kwargs.png

   See the [117]hist method and the [118]matplotlib hist documentation for
   more.

   The existing interface DataFrame.hist to plot histogram still can be
   used.
In [31]: plt.figure();

In [32]: df["A"].diff().hist();

   ../_images/hist_plot_ex.png

   [119]DataFrame.hist() plots the histograms of the columns on multiple
   subplots:
In [33]: plt.figure();

In [34]: df.diff().hist(color="k", alpha=0.5, bins=50);

   ../_images/frame_hist_ex.png

   The by keyword can be specified to plot grouped histograms:
In [35]: data = pd.Series(np.random.randn(1000))

In [36]: data.hist(by=np.random.randint(0, 4, 1000), figsize=(6, 4));

   ../_images/grouped_hist.png

Box plots[120]¶

   Boxplot can be drawn calling [121]Series.plot.box() and
   [122]DataFrame.plot.box(), or [123]DataFrame.boxplot() to visualize the
   distribution of values within each column.

   For instance, here is a boxplot representing five trials of 10
   observations of a uniform random variable on [0,1).
In [37]: df = pd.DataFrame(np.random.rand(10, 5), columns=["A", "B", "C", "D", "
E"])

In [38]: df.plot.box();

   ../_images/box_plot_new.png

   Boxplot can be colorized by passing color keyword. You can pass a dict
   whose keys are boxes, whiskers, medians and caps. If some keys are
   missing in the dict, default colors are used for the corresponding
   artists. Also, boxplot has sym keyword to specify fliers style.

   When you pass other type of arguments via color keyword, it will be
   directly passed to matplotlib for all the boxes, whiskers, medians and
   caps colorization.

   The colors are applied to every boxes to be drawn. If you want more
   complicated colorization, you can get each drawn artists by passing
   [124]return_type.
In [39]: color = {
   ....:     "boxes": "DarkGreen",
   ....:     "whiskers": "DarkOrange",
   ....:     "medians": "DarkBlue",
   ....:     "caps": "Gray",
   ....: }
   ....:

In [40]: df.plot.box(color=color, sym="r+");

   ../_images/box_new_colorize.png

   Also, you can pass other keywords supported by matplotlib boxplot. For
   example, horizontal and custom-positioned boxplot can be drawn by
   vert=False and positions keywords.
In [41]: df.plot.box(vert=False, positions=[1, 4, 5, 6, 8]);

   ../_images/box_new_kwargs.png

   See the [125]boxplot method and the [126]matplotlib boxplot
   documentation for more.

   The existing interface DataFrame.boxplot to plot boxplot still can be
   used.
In [42]: df = pd.DataFrame(np.random.rand(10, 5))

In [43]: plt.figure();

In [44]: bp = df.boxplot()

   ../_images/box_plot_ex.png

   You can create a stratified boxplot using the by keyword argument to
   create groupings. For instance,
In [45]: df = pd.DataFrame(np.random.rand(10, 2), columns=["Col1", "Col2"])

In [46]: df["X"] = pd.Series(["A", "A", "A", "A", "A", "B", "B", "B", "B", "B"])

In [47]: plt.figure();

In [48]: bp = df.boxplot(by="X")

   ../_images/box_plot_ex2.png

   You can also pass a subset of columns to plot, as well as group by
   multiple columns:
In [49]: df = pd.DataFrame(np.random.rand(10, 3), columns=["Col1", "Col2", "Col3
"])

In [50]: df["X"] = pd.Series(["A", "A", "A", "A", "A", "B", "B", "B", "B", "B"])

In [51]: df["Y"] = pd.Series(["A", "B", "A", "B", "A", "B", "A", "B", "A", "B"])

In [52]: plt.figure();

In [53]: bp = df.boxplot(column=["Col1", "Col2"], by=["X", "Y"])

   ../_images/box_plot_ex3.png

   In boxplot, the return type can be controlled by the return_type,
   keyword. The valid choices are {"axes", "dict", "both", None}.
   Faceting, created by DataFrame.boxplot with the by keyword, will affect
   the output type as well:

   return_type

   Faceted

   Output type

   None

   No

   axes

   None

   Yes

   2-D ndarray of axes

   'axes'

   No

   axes

   'axes'

   Yes

   Series of axes

   'dict'

   No

   dict of artists

   'dict'

   Yes

   Series of dicts of artists

   'both'

   No

   namedtuple

   'both'

   Yes

   Series of namedtuples

   Groupby.boxplot always returns a Series of return_type.
In [54]: np.random.seed(1234)

In [55]: df_box = pd.DataFrame(np.random.randn(50, 2))

In [56]: df_box["g"] = np.random.choice(["A", "B"], size=50)

In [57]: df_box.loc[df_box["g"] == "B", 1] += 3

In [58]: bp = df_box.boxplot(by="g")

   ../_images/boxplot_groupby.png

   The subplots above are split by the numeric columns first, then the
   value of the g column. Below the subplots are first split by the value
   of g, then by the numeric columns.
In [59]: bp = df_box.groupby("g").boxplot()

   ../_images/groupby_boxplot_vis.png

Area plot[127]¶

   You can create area plots with [128]Series.plot.area() and
   [129]DataFrame.plot.area(). Area plots are stacked by default. To
   produce stacked area plot, each column must be either all positive or
   all negative values.

   When input data contains NaN, it will be automatically filled by 0. If
   you want to drop or fill by different values, use dataframe.dropna() or
   dataframe.fillna() before calling plot.
In [60]: df = pd.DataFrame(np.random.rand(10, 4), columns=["a", "b", "c", "d"])

In [61]: df.plot.area();

   ../_images/area_plot_stacked.png

   To produce an unstacked plot, pass stacked=False. Alpha value is set to
   0.5 unless otherwise specified:
In [62]: df.plot.area(stacked=False);

   ../_images/area_plot_unstacked.png

Scatter plot[130]¶

   Scatter plot can be drawn by using the [131]DataFrame.plot.scatter()
   method. Scatter plot requires numeric columns for the x and y axes.
   These can be specified by the x and y keywords.
In [63]: df = pd.DataFrame(np.random.rand(50, 4), columns=["a", "b", "c", "d"])

In [64]: df["species"] = pd.Categorical(
   ....:     ["setosa"] * 20 + ["versicolor"] * 20 + ["virginica"] * 10
   ....: )
   ....:

In [65]: df.plot.scatter(x="a", y="b");

   ../_images/scatter_plot.png

   To plot multiple column groups in a single axes, repeat plot method
   specifying target ax. It is recommended to specify color and label
   keywords to distinguish each groups.
In [66]: ax = df.plot.scatter(x="a", y="b", color="DarkBlue", label="Group 1")

In [67]: df.plot.scatter(x="c", y="d", color="DarkGreen", label="Group 2", ax=ax
);

   ../_images/scatter_plot_repeated.png

   The keyword c may be given as the name of a column to provide colors
   for each point:
In [68]: df.plot.scatter(x="a", y="b", c="c", s=50);

   ../_images/scatter_plot_colored.png

   If a categorical column is passed to c, then a discrete colorbar will
   be produced:

   New in version 1.3.0.
In [69]: df.plot.scatter(x="a", y="b", c="species", cmap="viridis", s=50);

   ../_images/scatter_plot_categorical.png

   You can pass other keywords supported by matplotlib [132]scatter. The
   example below shows a bubble chart using a column of the DataFrame as
   the bubble size.
In [70]: df.plot.scatter(x="a", y="b", s=df["c"] * 200);

   ../_images/scatter_plot_bubble.png

   See the [133]scatter method and the [134]matplotlib scatter
   documentation for more.

Hexagonal bin plot[135]¶

   You can create hexagonal bin plots with [136]DataFrame.plot.hexbin().
   Hexbin plots can be a useful alternative to scatter plots if your data
   are too dense to plot each point individually.
In [71]: df = pd.DataFrame(np.random.randn(1000, 2), columns=["a", "b"])

In [72]: df["b"] = df["b"] + np.arange(1000)

In [73]: df.plot.hexbin(x="a", y="b", gridsize=25);

   ../_images/hexbin_plot.png

   A useful keyword argument is gridsize; it controls the number of
   hexagons in the x-direction, and defaults to 100. A larger gridsize
   means more, smaller bins.

   By default, a histogram of the counts around each (x, y) point is
   computed. You can specify alternative aggregations by passing values to
   the C and reduce_C_function arguments. C specifies the value at each
   (x, y) point and reduce_C_function is a function of one argument that
   reduces all the values in a bin to a single number (e.g. mean, max,
   sum, std). In this example the positions are given by columns a and b,
   while the value is given by column z. The bins are aggregated with
   NumPy’s max function.
In [74]: df = pd.DataFrame(np.random.randn(1000, 2), columns=["a", "b"])

In [75]: df["b"] = df["b"] + np.arange(1000)

In [76]: df["z"] = np.random.uniform(0, 3, 1000)

In [77]: df.plot.hexbin(x="a", y="b", C="z", reduce_C_function=np.max, gridsize=
25);

   ../_images/hexbin_plot_agg.png

   See the [137]hexbin method and the [138]matplotlib hexbin documentation
   for more.

Pie plot[139]¶

   You can create a pie plot with [140]DataFrame.plot.pie() or
   [141]Series.plot.pie(). If your data includes any NaN, they will be
   automatically filled with 0. A ValueError will be raised if there are
   any negative values in your data.
In [78]: series = pd.Series(3 * np.random.rand(4), index=["a", "b", "c", "d"], n
ame="series")

In [79]: series.plot.pie(figsize=(6, 6));

   ../_images/series_pie_plot.png

   For pie plots it’s best to use square figures, i.e. a figure aspect
   ratio 1. You can create the figure with equal width and height, or
   force the aspect ratio to be equal after plotting by calling
   ax.set_aspect('equal') on the returned axes object.

   Note that pie plot with [142]DataFrame requires that you either specify
   a target column by the y argument or subplots=True. When y is
   specified, pie plot of selected column will be drawn. If subplots=True
   is specified, pie plots for each column are drawn as subplots. A legend
   will be drawn in each pie plots by default; specify legend=False to
   hide it.
In [80]: df = pd.DataFrame(
   ....:     3 * np.random.rand(4, 2), index=["a", "b", "c", "d"], columns=["x",
 "y"]
   ....: )
   ....:

In [81]: df.plot.pie(subplots=True, figsize=(8, 4));

   ../_images/df_pie_plot.png

   You can use the labels and colors keywords to specify the labels and
   colors of each wedge.

   Warning

   Most pandas plots use the label and color arguments (note the lack of
   “s” on those). To be consistent with [143]matplotlib.pyplot.pie() you
   must use labels and colors.

   If you want to hide wedge labels, specify labels=None. If fontsize is
   specified, the value will be applied to wedge labels. Also, other
   keywords supported by [144]matplotlib.pyplot.pie() can be used.
In [82]: series.plot.pie(
   ....:     labels=["AA", "BB", "CC", "DD"],
   ....:     colors=["r", "g", "b", "c"],
   ....:     autopct="%.2f",
   ....:     fontsize=20,
   ....:     figsize=(6, 6),
   ....: );
   ....:

   ../_images/series_pie_plot_options.png

   If you pass values whose sum total is less than 1.0, matplotlib draws a
   semicircle.
In [83]: series = pd.Series([0.1] * 4, index=["a", "b", "c", "d"], name="series2
")

In [84]: series.plot.pie(figsize=(6, 6));

   ../_images/series_pie_plot_semi.png

   See the [145]matplotlib pie documentation for more.

Plotting with missing data[146]¶

   pandas tries to be pragmatic about plotting DataFrames or Series that
   contain missing data. Missing values are dropped, left out, or filled
   depending on the plot type.

   Plot Type

   NaN Handling

   Line

   Leave gaps at NaNs

   Line (stacked)

   Fill 0’s

   Bar

   Fill 0’s

   Scatter

   Drop NaNs

   Histogram

   Drop NaNs (column-wise)

   Box

   Drop NaNs (column-wise)

   Area

   Fill 0’s

   KDE

   Drop NaNs (column-wise)

   Hexbin

   Drop NaNs

   Pie

   Fill 0’s

   If any of these defaults are not what you want, or if you want to be
   explicit about how missing values are handled, consider using
   [147]fillna() or [148]dropna() before plotting.

Plotting tools[149]¶

   These functions can be imported from pandas.plotting and take a
   [150]Series or [151]DataFrame as an argument.

Scatter matrix plot[152]¶

   You can create a scatter plot matrix using the scatter_matrix method in
   pandas.plotting:
In [85]: from pandas.plotting import scatter_matrix

In [86]: df = pd.DataFrame(np.random.randn(1000, 4), columns=["a", "b", "c", "d"
])

In [87]: scatter_matrix(df, alpha=0.2, figsize=(6, 6), diagonal="kde");

   ../_images/scatter_matrix_kde.png

Density plot[153]¶

   You can create density plots using the [154]Series.plot.kde() and
   [155]DataFrame.plot.kde() methods.
In [88]: ser = pd.Series(np.random.randn(1000))

In [89]: ser.plot.kde();

   ../_images/kde_plot.png

Andrews curves[156]¶

   Andrews curves allow one to plot multivariate data as a large number of
   curves that are created using the attributes of samples as coefficients
   for Fourier series, see the [157]Wikipedia entry for more information.
   By coloring these curves differently for each class it is possible to
   visualize data clustering. Curves belonging to samples of the same
   class will usually be closer together and form larger structures.

   Note: The “Iris” dataset is available [158]here.
In [90]: from pandas.plotting import andrews_curves

In [91]: data = pd.read_csv("data/iris.data")

In [92]: plt.figure();

In [93]: andrews_curves(data, "Name");

   ../_images/andrews_curves.png

Parallel coordinates[159]¶

   Parallel coordinates is a plotting technique for plotting multivariate
   data, see the [160]Wikipedia entry for an introduction. Parallel
   coordinates allows one to see clusters in data and to estimate other
   statistics visually. Using parallel coordinates points are represented
   as connected line segments. Each vertical line represents one
   attribute. One set of connected line segments represents one data
   point. Points that tend to cluster will appear closer together.
In [94]: from pandas.plotting import parallel_coordinates

In [95]: data = pd.read_csv("data/iris.data")

In [96]: plt.figure();

In [97]: parallel_coordinates(data, "Name");

   ../_images/parallel_coordinates.png

Lag plot[161]¶

   Lag plots are used to check if a data set or time series is random.
   Random data should not exhibit any structure in the lag plot.
   Non-random structure implies that the underlying data are not random.
   The lag argument may be passed, and when lag=1 the plot is essentially
   data[:-1] vs. data[1:].
In [98]: from pandas.plotting import lag_plot

In [99]: plt.figure();

In [100]: spacing = np.linspace(-99 * np.pi, 99 * np.pi, num=1000)

In [101]: data = pd.Series(0.1 * np.random.rand(1000) + 0.9 * np.sin(spacing))

In [102]: lag_plot(data);

   ../_images/lag_plot.png

Autocorrelation plot[162]¶

   Autocorrelation plots are often used for checking randomness in time
   series. This is done by computing autocorrelations for data values at
   varying time lags. If time series is random, such autocorrelations
   should be near zero for any and all time-lag separations. If time
   series is non-random then one or more of the autocorrelations will be
   significantly non-zero. The horizontal lines displayed in the plot
   correspond to 95% and 99% confidence bands. The dashed line is 99%
   confidence band. See the [163]Wikipedia entry for more about
   autocorrelation plots.
In [103]: from pandas.plotting import autocorrelation_plot

In [104]: plt.figure();

In [105]: spacing = np.linspace(-9 * np.pi, 9 * np.pi, num=1000)

In [106]: data = pd.Series(0.7 * np.random.rand(1000) + 0.3 * np.sin(spacing))

In [107]: autocorrelation_plot(data);

   ../_images/autocorrelation_plot.png

Bootstrap plot[164]¶

   Bootstrap plots are used to visually assess the uncertainty of a
   statistic, such as mean, median, midrange, etc. A random subset of a
   specified size is selected from a data set, the statistic in question
   is computed for this subset and the process is repeated a specified
   number of times. Resulting plots and histograms are what constitutes
   the bootstrap plot.
In [108]: from pandas.plotting import bootstrap_plot

In [109]: data = pd.Series(np.random.rand(1000))

In [110]: bootstrap_plot(data, size=50, samples=500, color="grey");

   ../_images/bootstrap_plot.png

RadViz[165]¶

   RadViz is a way of visualizing multi-variate data. It is based on a
   simple spring tension minimization algorithm. Basically you set up a
   bunch of points in a plane. In our case they are equally spaced on a
   unit circle. Each point represents a single attribute. You then pretend
   that each sample in the data set is attached to each of these points by
   a spring, the stiffness of which is proportional to the numerical value
   of that attribute (they are normalized to unit interval). The point in
   the plane, where our sample settles to (where the forces acting on our
   sample are at an equilibrium) is where a dot representing our sample
   will be drawn. Depending on which class that sample belongs it will be
   colored differently. See the R package [166]Radviz for more
   information.

   Note: The “Iris” dataset is available [167]here.
In [111]: from pandas.plotting import radviz

In [112]: data = pd.read_csv("data/iris.data")

In [113]: plt.figure();

In [114]: radviz(data, "Name");

   ../_images/radviz.png

Plot formatting[168]¶

Setting the plot style[169]¶

   From version 1.5 and up, matplotlib offers a range of pre-configured
   plotting styles. Setting the style can be used to easily give plots the
   general look that you want. Setting the style is as easy as calling
   matplotlib.style.use(my_plot_style) before creating your plot. For
   example you could write matplotlib.style.use('ggplot') for ggplot-style
   plots.

   You can see the various available style names at
   matplotlib.style.available and it’s very easy to try them out.

General plot style arguments[170]¶

   Most plotting methods have a set of keyword arguments that control the
   layout and formatting of the returned plot:
In [115]: plt.figure();

In [116]: ts.plot(style="k--", label="Series");

   ../_images/series_plot_basic2.png

   For each kind of plot (e.g. line, bar, scatter) any additional
   arguments keywords are passed along to the corresponding matplotlib
   function ([171]ax.plot(), [172]ax.bar(), [173]ax.scatter()). These can
   be used to control additional styling, beyond what pandas provides.

Controlling the legend[174]¶

   You may set the legend argument to False to hide the legend, which is
   shown by default.
In [117]: df = pd.DataFrame(np.random.randn(1000, 4), index=ts.index, columns=li
st("ABCD"))

In [118]: df = df.cumsum()

In [119]: df.plot(legend=False);

   ../_images/frame_plot_basic_noleg.png

Controlling the labels[175]¶

   New in version 1.1.0.

   You may set the xlabel and ylabel arguments to give the plot custom
   labels for x and y axis. By default, pandas will pick up index name as
   xlabel, while leaving it empty for ylabel.

In [120]: df.plot();

In [121]: df.plot(xlabel="new x", ylabel="new y");

   ../_images/plot_xlabel_ylabel.png

Scales[176]¶

   You may pass logy to get a log-scale Y axis.
In [122]: ts = pd.Series(np.random.randn(1000), index=pd.date_range("1/1/2000",
periods=1000))

In [123]: ts = np.exp(ts.cumsum())

In [124]: ts.plot(logy=True);

   ../_images/series_plot_logy.png

   See also the logx and loglog keyword arguments.

Plotting on a secondary y-axis[177]¶

   To plot data on a secondary y-axis, use the secondary_y keyword:
In [125]: df["A"].plot();

In [126]: df["B"].plot(secondary_y=True, style="g");

   ../_images/series_plot_secondary_y.png

   To plot some columns in a DataFrame, give the column names to the
   secondary_y keyword:
In [127]: plt.figure();

In [128]: ax = df.plot(secondary_y=["A", "B"])

In [129]: ax.set_ylabel("CD scale");

In [130]: ax.right_ax.set_ylabel("AB scale");

   ../_images/frame_plot_secondary_y.png

   Note that the columns plotted on the secondary y-axis is automatically
   marked with “(right)” in the legend. To turn off the automatic marking,
   use the mark_right=False keyword:
In [131]: plt.figure();

In [132]: df.plot(secondary_y=["A", "B"], mark_right=False);

   ../_images/frame_plot_secondary_y_no_right.png

Custom formatters for timeseries plots[178]¶

   Changed in version 1.0.0.

   pandas provides custom formatters for timeseries plots. These change
   the formatting of the axis labels for dates and times. By default, the
   custom formatters are applied only to plots created by pandas with
   [179]DataFrame.plot() or [180]Series.plot(). To have them apply to all
   plots, including those made by matplotlib, set the option
   pd.options.plotting.matplotlib.register_converters = True or use
   [181]pandas.plotting.register_matplotlib_converters().

Suppressing tick resolution adjustment[182]¶

   pandas includes automatic tick resolution adjustment for regular
   frequency time-series data. For limited cases where pandas cannot infer
   the frequency information (e.g., in an externally created twinx), you
   can choose to suppress this behavior for alignment purposes.

   Here is the default behavior, notice how the x-axis tick labeling is
   performed:
In [133]: plt.figure();

In [134]: df["A"].plot();

   ../_images/ser_plot_suppress.png

   Using the x_compat parameter, you can suppress this behavior:
In [135]: plt.figure();

In [136]: df["A"].plot(x_compat=True);

   ../_images/ser_plot_suppress_parm.png

   If you have more than one plot that needs to be suppressed, the use
   method in pandas.plotting.plot_params can be used in a with statement:
In [137]: plt.figure();

In [138]: with pd.plotting.plot_params.use("x_compat", True):
   .....:     df["A"].plot(color="r")
   .....:     df["B"].plot(color="g")
   .....:     df["C"].plot(color="b")
   .....:

   ../_images/ser_plot_suppress_context.png

Automatic date tick adjustment[183]¶

   TimedeltaIndex now uses the native matplotlib tick locator methods, it
   is useful to call the automatic date tick adjustment from matplotlib
   for figures whose ticklabels overlap.

   See the autofmt_xdate method and the [184]matplotlib documentation for
   more.

Subplots[185]¶

   Each Series in a DataFrame can be plotted on a different axis with the
   subplots keyword:
In [139]: df.plot(subplots=True, figsize=(6, 6));

   ../_images/frame_plot_subplots.png

Using layout and targeting multiple axes[186]¶

   The layout of subplots can be specified by the layout keyword. It can
   accept (rows, columns). The layout keyword can be used in hist and
   boxplot also. If the input is invalid, a ValueError will be raised.

   The number of axes which can be contained by rows x columns specified
   by layout must be larger than the number of required subplots. If
   layout can contain more axes than required, blank axes are not drawn.
   Similar to a NumPy array’s reshape method, you can use -1 for one
   dimension to automatically calculate the number of rows or columns
   needed, given the other.
In [140]: df.plot(subplots=True, layout=(2, 3), figsize=(6, 6), sharex=False);

   ../_images/frame_plot_subplots_layout.png

   The above example is identical to using:
In [141]: df.plot(subplots=True, layout=(2, -1), figsize=(6, 6), sharex=False);

   The required number of columns (3) is inferred from the number of
   series to plot and the given number of rows (2).

   You can pass multiple axes created beforehand as list-like via ax
   keyword. This allows more complicated layouts. The passed axes must be
   the same number as the subplots being drawn.

   When multiple axes are passed via the ax keyword, layout, sharex and
   sharey keywords don’t affect to the output. You should explicitly pass
   sharex=False and sharey=False, otherwise you will see a warning.
In [142]: fig, axes = plt.subplots(4, 4, figsize=(9, 9))

In [143]: plt.subplots_adjust(wspace=0.5, hspace=0.5)

In [144]: target1 = [axes[0][0], axes[1][1], axes[2][2], axes[3][3]]

In [145]: target2 = [axes[3][0], axes[2][1], axes[1][2], axes[0][3]]

In [146]: df.plot(subplots=True, ax=target1, legend=False, sharex=False, sharey=
False);

In [147]: (-df).plot(subplots=True, ax=target2, legend=False, sharex=False, shar
ey=False);

   ../_images/frame_plot_subplots_multi_ax.png

   Another option is passing an ax argument to [187]Series.plot() to plot
   on a particular axis:
In [148]: fig, axes = plt.subplots(nrows=2, ncols=2)

In [149]: plt.subplots_adjust(wspace=0.2, hspace=0.5)

In [150]: df["A"].plot(ax=axes[0, 0]);

In [151]: axes[0, 0].set_title("A");

In [152]: df["B"].plot(ax=axes[0, 1]);

In [153]: axes[0, 1].set_title("B");

In [154]: df["C"].plot(ax=axes[1, 0]);

In [155]: axes[1, 0].set_title("C");

In [156]: df["D"].plot(ax=axes[1, 1]);

In [157]: axes[1, 1].set_title("D");

   ../_images/series_plot_multi.png

Plotting with error bars[188]¶

   Plotting with error bars is supported in [189]DataFrame.plot() and
   [190]Series.plot().

   Horizontal and vertical error bars can be supplied to the xerr and yerr
   keyword arguments to [191]plot(). The error values can be specified
   using a variety of formats:
     * As a [192]DataFrame or dict of errors with column names matching
       the columns attribute of the plotting [193]DataFrame or matching
       the name attribute of the [194]Series.
     * As a str indicating which of the columns of plotting [195]DataFrame
       contain the error values.
     * As raw values (list, tuple, or np.ndarray). Must be the same length
       as the plotting [196]DataFrame/[197]Series.

   Here is an example of one way to easily plot group means with standard
   deviations from the raw data.
# Generate the data
In [158]: ix3 = pd.MultiIndex.from_arrays(
   .....:     [
   .....:         ["a", "a", "a", "a", "a", "b", "b", "b", "b", "b"],
   .....:         ["foo", "foo", "foo", "bar", "bar", "foo", "foo", "bar", "bar"
, "bar"],
   .....:     ],
   .....:     names=["letter", "word"],
   .....: )
   .....:

In [159]: df3 = pd.DataFrame(
   .....:     {
   .....:         "data1": [9, 3, 2, 4, 3, 2, 4, 6, 3, 2],
   .....:         "data2": [9, 6, 5, 7, 5, 4, 5, 6, 5, 1],
   .....:     },
   .....:     index=ix3,
   .....: )
   .....:

# Group by index labels and take the means and standard deviations
# for each group
In [160]: gp3 = df3.groupby(level=("letter", "word"))

In [161]: means = gp3.mean()

In [162]: errors = gp3.std()

In [163]: means
Out[163]:
                data1     data2
letter word
a      bar   3.500000  6.000000
       foo   4.666667  6.666667
b      bar   3.666667  4.000000
       foo   3.000000  4.500000

In [164]: errors
Out[164]:
                data1     data2
letter word
a      bar   0.707107  1.414214
       foo   3.785939  2.081666
b      bar   2.081666  2.645751
       foo   1.414214  0.707107

# Plot
In [165]: fig, ax = plt.subplots()

In [166]: means.plot.bar(yerr=errors, ax=ax, capsize=4, rot=0);

   ../_images/errorbar_example.png

   Asymmetrical error bars are also supported, however raw error values
   must be provided in this case. For a N length [198]Series, a 2xN array
   should be provided indicating lower and upper (or left and right)
   errors. For a MxN [199]DataFrame, asymmetrical errors should be in a
   Mx2xN array.

   Here is an example of one way to plot the min/max range using
   asymmetrical error bars.
In [167]: mins = gp3.min()

In [168]: maxs = gp3.max()

# errors should be positive, and defined in the order of lower, upper
In [169]: errors = [[means[c] - mins[c], maxs[c] - means[c]] for c in df3.column
s]

# Plot
In [170]: fig, ax = plt.subplots()

In [171]: means.plot.bar(yerr=errors, ax=ax, capsize=4, rot=0);

   ../_images/errorbar_asymmetrical_example.png

Plotting tables[200]¶

   Plotting with matplotlib table is now supported in
   [201]DataFrame.plot() and [202]Series.plot() with a table keyword. The
   table keyword can accept bool, [203]DataFrame or [204]Series. The
   simple way to draw a table is to specify table=True. Data will be
   transposed to meet matplotlib’s default layout.
In [172]: fig, ax = plt.subplots(1, 1, figsize=(7, 6.5))

In [173]: df = pd.DataFrame(np.random.rand(5, 3), columns=["a", "b", "c"])

In [174]: ax.xaxis.tick_top()  # Display x-axis ticks on top.

In [175]: df.plot(table=True, ax=ax);

   ../_images/line_plot_table_true.png

   Also, you can pass a different [205]DataFrame or [206]Series to the
   table keyword. The data will be drawn as displayed in print method (not
   transposed automatically). If required, it should be transposed
   manually as seen in the example below.
In [176]: fig, ax = plt.subplots(1, 1, figsize=(7, 6.75))

In [177]: ax.xaxis.tick_top()  # Display x-axis ticks on top.

In [178]: df.plot(table=np.round(df.T, 2), ax=ax);

   ../_images/line_plot_table_data.png

   There also exists a helper function pandas.plotting.table, which
   creates a table from [207]DataFrame or [208]Series, and adds it to an
   matplotlib.Axes instance. This function can accept keywords which the
   matplotlib [209]table has.
In [179]: from pandas.plotting import table

In [180]: fig, ax = plt.subplots(1, 1)

In [181]: table(ax, np.round(df.describe(), 2), loc="upper right", colWidths=[0.
2, 0.2, 0.2]);

In [182]: df.plot(ax=ax, ylim=(0, 2), legend=None);

   ../_images/line_plot_table_describe.png

   Note: You can get table instances on the axes using axes.tables
   property for further decorations. See the [210]matplotlib table
   documentation for more.

Colormaps[211]¶

   A potential issue when plotting a large number of columns is that it
   can be difficult to distinguish some series due to repetition in the
   default colors. To remedy this, DataFrame plotting supports the use of
   the colormap argument, which accepts either a Matplotlib [212]colormap
   or a string that is a name of a colormap registered with Matplotlib. A
   visualization of the default matplotlib colormaps is available
   [213]here.

   As matplotlib does not directly support colormaps for line-based plots,
   the colors are selected based on an even spacing determined by the
   number of columns in the DataFrame. There is no consideration made for
   background color, so some colormaps will produce lines that are not
   easily visible.

   To use the cubehelix colormap, we can pass colormap='cubehelix'.
In [183]: df = pd.DataFrame(np.random.randn(1000, 10), index=ts.index)

In [184]: df = df.cumsum()

In [185]: plt.figure();

In [186]: df.plot(colormap="cubehelix");

   ../_images/cubehelix.png

   Alternatively, we can pass the colormap itself:
In [187]: from matplotlib import cm

In [188]: plt.figure();

In [189]: df.plot(colormap=cm.cubehelix);

   ../_images/cubehelix_cm.png

   Colormaps can also be used other plot types, like bar charts:
In [190]: dd = pd.DataFrame(np.random.randn(10, 10)).applymap(abs)

In [191]: dd = dd.cumsum()

In [192]: plt.figure();

In [193]: dd.plot.bar(colormap="Greens");

   ../_images/greens.png

   Parallel coordinates charts:
In [194]: plt.figure();

In [195]: parallel_coordinates(data, "Name", colormap="gist_rainbow");

   ../_images/parallel_gist_rainbow.png

   Andrews curves charts:
In [196]: plt.figure();

In [197]: andrews_curves(data, "Name", colormap="winter");

   ../_images/andrews_curve_winter.png

Plotting directly with matplotlib[214]¶

   In some situations it may still be preferable or necessary to prepare
   plots directly with matplotlib, for instance when a certain type of
   plot or customization is not (yet) supported by pandas. Series and
   DataFrame objects behave like arrays and can therefore be passed
   directly to matplotlib functions without explicit casts.

   pandas also automatically registers formatters and locators that
   recognize date indices, thereby extending date and time support to
   practically all plot types available in matplotlib. Although this
   formatting does not provide the same level of refinement you would get
   when plotting via pandas, it can be faster when plotting a large number
   of points.
In [198]: price = pd.Series(
   .....:     np.random.randn(150).cumsum(),
   .....:     index=pd.date_range("2000-1-1", periods=150, freq="B"),
   .....: )
   .....:

In [199]: ma = price.rolling(20).mean()

In [200]: mstd = price.rolling(20).std()

In [201]: plt.figure();

In [202]: plt.plot(price.index, price, "k");

In [203]: plt.plot(ma.index, ma, "b");

In [204]: plt.fill_between(mstd.index, ma - 2 * mstd, ma + 2 * mstd, color="b",
alpha=0.2);

   ../_images/bollinger.png

Plotting backends[215]¶

   Starting in version 0.25, pandas can be extended with third-party
   plotting backends. The main idea is letting users select a plotting
   backend different than the provided one based on Matplotlib.

   This can be done by passsing ‘backend.module’ as the argument backend
   in plot function. For example:
>>> Series([1, 2, 3]).plot(backend="backend.module")

   Alternatively, you can also set this option globally, do you don’t need
   to specify the keyword in each plot call. For example:
>>> pd.set_option("plotting.backend", "backend.module")
>>> pd.Series([1, 2, 3]).plot()

   Or:
>>> pd.options.plotting.backend = "backend.module"
>>> pd.Series([1, 2, 3]).plot()

   This would be more or less equivalent to:
>>> import backend.module
>>> backend.module.plot(pd.Series([1, 2, 3]))

   The backend module can then use other visualization tools (Bokeh,
   Altair, hvplot,…) to generate the plots. Some libraries implementing a
   backend for pandas are listed on the ecosystem [216]Visualization page.

   Developers guide can be found at
   [217]https://pandas.pydata.org/docs/dev/development/extending.html#plot
   ting-backends
   [218]Nullable Boolean data type [219]Table Visualization

   © Copyright 2008-2021, the pandas development team.

   Created using [220]Sphinx 3.5.4.

References

   1. https://pandas.pydata.org/pandas-docs/stable/genindex.html
   2. https://pandas.pydata.org/pandas-docs/stable/search.html
   3. https://pandas.pydata.org/pandas-docs/stable/user_guide/style.html
   4. https://pandas.pydata.org/pandas-docs/stable/user_guide/boolean.html
   5. https://pandas.pydata.org/pandas-docs/stable/index.html
   6. https://pandas.pydata.org/pandas-docs/stable/getting_started/index.html
   7. https://pandas.pydata.org/pandas-docs/stable/user_guide/index.html
   8. https://pandas.pydata.org/pandas-docs/stable/reference/index.html
   9. https://pandas.pydata.org/pandas-docs/stable/development/index.html
  10. https://pandas.pydata.org/pandas-docs/stable/whatsnew/index.html
  11. https://github.com/pandas-dev/pandas
  12. https://twitter.com/pandas_dev
  13. https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.html
  14. https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html
  15. https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html
  16. https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html
  17. https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html
  18. https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html
  19. https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html
  20. https://pandas.pydata.org/pandas-docs/stable/user_guide/reshaping.html
  21. https://pandas.pydata.org/pandas-docs/stable/user_guide/text.html
  22. https://pandas.pydata.org/pandas-docs/stable/user_guide/missing_data.html
  23. https://pandas.pydata.org/pandas-docs/stable/user_guide/duplicates.html
  24. https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html
  25. https://pandas.pydata.org/pandas-docs/stable/user_guide/integer_na.html
  26. https://pandas.pydata.org/pandas-docs/stable/user_guide/boolean.html
  27. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html
  28. https://pandas.pydata.org/pandas-docs/stable/user_guide/style.html
  29. https://pandas.pydata.org/pandas-docs/stable/user_guide/computation.html
  30. https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html
  31. https://pandas.pydata.org/pandas-docs/stable/user_guide/window.html
  32. https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html
  33. https://pandas.pydata.org/pandas-docs/stable/user_guide/timedeltas.html
  34. https://pandas.pydata.org/pandas-docs/stable/user_guide/options.html
  35. https://pandas.pydata.org/pandas-docs/stable/user_guide/enhancingperf.html
  36. https://pandas.pydata.org/pandas-docs/stable/user_guide/scale.html
  37. https://pandas.pydata.org/pandas-docs/stable/user_guide/sparse.html
  38. https://pandas.pydata.org/pandas-docs/stable/user_guide/gotchas.html
  39. https://pandas.pydata.org/pandas-docs/stable/user_guide/cookbook.html
  40. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#basic-plotting-plot
  41. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#other-plots
  42. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#bar-plots
  43. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#histograms
  44. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#box-plots
  45. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#area-plot
  46. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#scatter-plot
  47. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#hexagonal-bin-plot
  48. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#pie-plot
  49. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#plotting-with-missing-data
  50. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#plotting-tools
  51. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#scatter-matrix-plot
  52. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#density-plot
  53. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#andrews-curves
  54. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#parallel-coordinates
  55. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#lag-plot
  56. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#autocorrelation-plot
  57. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#bootstrap-plot
  58. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#radviz
  59. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#plot-formatting
  60. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#setting-the-plot-style
  61. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#general-plot-style-arguments
  62. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#controlling-the-legend
  63. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#controlling-the-labels
  64. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#scales
  65. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#plotting-on-a-secondary-y-axis
  66. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#custom-formatters-for-timeseries-plots
  67. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#suppressing-tick-resolution-adjustment
  68. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#automatic-date-tick-adjustment
  69. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#subplots
  70. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#using-layout-and-targeting-multiple-axes
  71. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#plotting-with-error-bars
  72. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#plotting-tables
  73. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#colormaps
  74. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#plotting-directly-with-matplotlib
  75. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#plotting-backends
  76. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#chart-visualization
  77. https://pandas.pydata.org/pandas-docs/stable/user_guide/style.html
  78. https://pandas.pydata.org/pandas-docs/stable/ecosystem.html#ecosystem-visualization
  79. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#basic-plotting-plot
  80. https://pandas.pydata.org/pandas-docs/stable/user_guide/cookbook.html#cookbook-plotting
  81. https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html#matplotlib.axes.Axes.plot
  82. https://matplotlib.org/stable/api/figure_api.html#matplotlib.figure.Figure.autofmt_xdate
  83. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
  84. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
  85. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization-formatting
  86. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#other-plots
  87. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
  88. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization-barplot
  89. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization-barplot
  90. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization-hist
  91. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization-box
  92. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization-kde
  93. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization-kde
  94. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization-area-plot
  95. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization-scatter
  96. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization-hexbin
  97. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization-pie
  98. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization-hist
  99. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization-box
 100. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization-tools
 101. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series
 102. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
 103. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization-scatter-matrix
 104. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization-andrews-curves
 105. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization-parallel-coordinates
 106. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization-lag
 107. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization-autocorrelation
 108. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization-bootstrap
 109. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization-radviz
 110. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization-errorbars
 111. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization-table
 112. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#bar-plots
 113. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.bar.html#pandas.DataFrame.plot.bar
 114. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#histograms
 115. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.hist.html#pandas.DataFrame.plot.hist
 116. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.plot.hist.html#pandas.Series.plot.hist
 117. https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.hist.html#matplotlib.axes.Axes.hist
 118. https://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.hist
 119. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.hist.html#pandas.DataFrame.hist
 120. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#box-plots
 121. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.plot.box.html#pandas.Series.plot.box
 122. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.box.html#pandas.DataFrame.plot.box
 123. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.boxplot.html#pandas.DataFrame.boxplot
 124. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization-box-return
 125. https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.boxplot.html#matplotlib.axes.Axes.boxplot
 126. https://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.boxplot
 127. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#area-plot
 128. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.plot.area.html#pandas.Series.plot.area
 129. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.area.html#pandas.DataFrame.plot.area
 130. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#scatter-plot
 131. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.scatter.html#pandas.DataFrame.plot.scatter
 132. https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter
 133. https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter
 134. https://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.scatter
 135. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#hexagonal-bin-plot
 136. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.hexbin.html#pandas.DataFrame.plot.hexbin
 137. https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.hexbin.html#matplotlib.axes.Axes.hexbin
 138. https://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.hexbin
 139. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#pie-plot
 140. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.pie.html#pandas.DataFrame.plot.pie
 141. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.plot.pie.html#pandas.Series.plot.pie
 142. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
 143. https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pie.html#matplotlib.pyplot.pie
 144. https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pie.html#matplotlib.pyplot.pie
 145. https://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.pie
 146. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#plotting-with-missing-data
 147. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
 148. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.dropna.html#pandas.DataFrame.dropna
 149. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#plotting-tools
 150. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series
 151. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
 152. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#scatter-matrix-plot
 153. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#density-plot
 154. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.plot.kde.html#pandas.Series.plot.kde
 155. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.kde.html#pandas.DataFrame.plot.kde
 156. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#andrews-curves
 157. https://en.wikipedia.org/wiki/Andrews_plot
 158. https://raw.github.com/pandas-dev/pandas/master/pandas/tests/io/data/csv/iris.csv
 159. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#parallel-coordinates
 160. https://en.wikipedia.org/wiki/Parallel_coordinates
 161. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#lag-plot
 162. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#autocorrelation-plot
 163. https://en.wikipedia.org/wiki/Correlogram
 164. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#bootstrap-plot
 165. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#radviz
 166. https://cran.r-project.org/package=Radviz/
 167. https://raw.github.com/pandas-dev/pandas/master/pandas/tests/io/data/csv/iris.csv
 168. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#plot-formatting
 169. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#setting-the-plot-style
 170. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#general-plot-style-arguments
 171. https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html#matplotlib.axes.Axes.plot
 172. https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.bar.html#matplotlib.axes.Axes.bar
 173. https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter
 174. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#controlling-the-legend
 175. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#controlling-the-labels
 176. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#scales
 177. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#plotting-on-a-secondary-y-axis
 178. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#custom-formatters-for-timeseries-plots
 179. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
 180. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.plot.html#pandas.Series.plot
 181. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.plotting.register_matplotlib_converters.html#pandas.plotting.register_matplotlib_converters
 182. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#suppressing-tick-resolution-adjustment
 183. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#automatic-date-tick-adjustment
 184. https://matplotlib.org/users/recipes.html#fixing-common-date-annoyances
 185. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#subplots
 186. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#using-layout-and-targeting-multiple-axes
 187. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.plot.html#pandas.Series.plot
 188. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#plotting-with-error-bars
 189. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
 190. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.plot.html#pandas.Series.plot
 191. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
 192. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
 193. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
 194. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series
 195. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
 196. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
 197. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series
 198. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series
 199. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
 200. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#plotting-tables
 201. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
 202. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.plot.html#pandas.Series.plot
 203. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
 204. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series
 205. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
 206. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series
 207. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame
 208. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series
 209. https://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes.table
 210. https://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes.table
 211. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#colormaps
 212. https://matplotlib.org/api/cm_api.html
 213. https://matplotlib.org/examples/color/colormaps_reference.html
 214. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#plotting-directly-with-matplotlib
 215. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#plotting-backends
 216. https://pandas.pydata.org/pandas-docs/stable/ecosystem.html#ecosystem-visualization
 217. https://pandas.pydata.org/docs/dev/development/extending.html#plotting-backends
 218. https://pandas.pydata.org/pandas-docs/stable/user_guide/boolean.html
 219. https://pandas.pydata.org/pandas-docs/stable/user_guide/style.html
 220. http://sphinx-doc.org/
