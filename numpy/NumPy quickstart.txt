
   #[1]Index [2]Search [3]NumPy: the absolute basics for beginners [4]What
   is NumPy?

   [5]logo (BUTTON)
     * [6]User Guide
     * [7]API reference
     * [8]Development

     * [9]GitHub
     * [10]Twitter

   ____________________

     * [11]What is NumPy?
     * [12]Installation
     * [13]NumPy quickstart
     * [14]NumPy: the absolute basics for beginners
     * [15]NumPy fundamentals
     * [16]Miscellaneous
     * [17]NumPy for MATLAB users
     * [18]Building from source
     * [19]Using NumPy C-API
     * [20]NumPy Tutorials
     * [21]NumPy How Tos
     * [22]For downstream package authors
     * [23]F2PY Users Guide and Reference Manual
     * [24]Glossary
     * [25]Under-the-hood Documentation for developers
     * [26]NumPy’s Documentation
     * [27]Reporting bugs
     * [28]Release Notes
     * [29]Documentation conventions
     * [30]NumPy license

   On this page

     * [31]Prerequisites
     * [32]The Basics
          + [33]An example
          + [34]Array Creation
          + [35]Printing Arrays
          + [36]Basic Operations
          + [37]Universal Functions
          + [38]Indexing, Slicing and Iterating
     * [39]Shape Manipulation
          + [40]Changing the shape of an array
          + [41]Stacking together different arrays
          + [42]Splitting one array into several smaller ones
     * [43]Copies and Views
          + [44]No Copy at All
          + [45]View or Shallow Copy
          + [46]Deep Copy
          + [47]Functions and Methods Overview
     * [48]Less Basic
          + [49]Broadcasting rules
     * [50]Advanced indexing and index tricks
          + [51]Indexing with Arrays of Indices
          + [52]Indexing with Boolean Arrays
          + [53]The ix_() function
          + [54]Indexing with strings
     * [55]Tricks and Tips
          + [56]“Automatic” Reshaping
          + [57]Vector Stacking
          + [58]Histograms
     * [59]Further reading

NumPy quickstart[60]¶

Prerequisites[61]¶

   You’ll need to know a bit of Python. For a refresher, see the
   [62]Python tutorial.

   To work the examples, you’ll need matplotlib installed in addition to
   NumPy.

   Learner profile

   This is a quick overview of arrays in NumPy. It demonstrates how
   n-dimensional (\(n>=2\)) arrays are represented and can be manipulated.
   In particular, if you don’t know how to apply common functions to
   n-dimensional arrays (without using for-loops), or if you want to
   understand axis and shape properties for n-dimensional arrays, this
   article might be of help.

   Learning Objectives

   After reading, you should be able to:
     * Understand the difference between one-, two- and n-dimensional
       arrays in NumPy;
     * Understand how to apply some linear algebra operations to
       n-dimensional arrays without using for-loops;
     * Understand axis and shape properties for n-dimensional arrays.

The Basics[63]¶

   NumPy’s main object is the homogeneous multidimensional array. It is a
   table of elements (usually numbers), all of the same type, indexed by a
   tuple of non-negative integers. In NumPy dimensions are called axes.

   For example, the coordinates of a point in 3D space [1, 2, 1] has one
   axis. That axis has 3 elements in it, so we say it has a length of 3.
   In the example pictured below, the array has 2 axes. The first axis has
   a length of 2, the second axis has a length of 3.
[[1., 0., 0.],
 [0., 1., 2.]]

   NumPy’s array class is called ndarray. It is also known by the alias
   array. Note that numpy.array is not the same as the Standard Python
   Library class array.array, which only handles one-dimensional arrays
   and offers less functionality. The more important attributes of an
   ndarray object are:

   ndarray.ndim
          the number of axes (dimensions) of the array.

   ndarray.shape
          the dimensions of the array. This is a tuple of integers
          indicating the size of the array in each dimension. For a matrix
          with n rows and m columns, shape will be (n,m). The length of
          the shape tuple is therefore the number of axes, ndim.

   ndarray.size
          the total number of elements of the array. This is equal to the
          product of the elements of shape.

   ndarray.dtype
          an object describing the type of the elements in the array. One
          can create or specify dtype’s using standard Python types.
          Additionally NumPy provides types of its own. numpy.int32,
          numpy.int16, and numpy.float64 are some examples.

   ndarray.itemsize
          the size in bytes of each element of the array. For example, an
          array of elements of type float64 has itemsize 8 (=64/8), while
          one of type complex32 has itemsize 4 (=32/8). It is equivalent
          to ndarray.dtype.itemsize.

   ndarray.data
          the buffer containing the actual elements of the array.
          Normally, we won’t need to use this attribute because we will
          access the elements in an array using indexing facilities.

An example[64]¶

>>> import numpy as np
>>> a = np.arange(15).reshape(3, 5)
>>> a
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14]])
>>> a.shape
(3, 5)
>>> a.ndim
2
>>> a.dtype.name
'int64'
>>> a.itemsize
8
>>> a.size
15
>>> type(a)
<class 'numpy.ndarray'>
>>> b = np.array([6, 7, 8])
>>> b
array([6, 7, 8])
>>> type(b)
<class 'numpy.ndarray'>

Array Creation[65]¶

   There are several ways to create arrays.

   For example, you can create an array from a regular Python list or
   tuple using the array function. The type of the resulting array is
   deduced from the type of the elements in the sequences.
>>> import numpy as np
>>> a = np.array([2, 3, 4])
>>> a
array([2, 3, 4])
>>> a.dtype
dtype('int64')
>>> b = np.array([1.2, 3.5, 5.1])
>>> b.dtype
dtype('float64')

   A frequent error consists in calling array with multiple arguments,
   rather than providing a single sequence as an argument.
>>> a = np.array(1, 2, 3, 4)    # WRONG
Traceback (most recent call last):
  ...
TypeError: array() takes from 1 to 2 positional arguments but 4 were given
>>> a = np.array([1, 2, 3, 4])  # RIGHT

   array transforms sequences of sequences into two-dimensional arrays,
   sequences of sequences of sequences into three-dimensional arrays, and
   so on.
>>> b = np.array([(1.5, 2, 3), (4, 5, 6)])
>>> b
array([[1.5, 2. , 3. ],
       [4. , 5. , 6. ]])

   The type of the array can also be explicitly specified at creation
   time:
>>> c = np.array([[1, 2], [3, 4]], dtype=complex)
>>> c
array([[1.+0.j, 2.+0.j],
       [3.+0.j, 4.+0.j]])

   Often, the elements of an array are originally unknown, but its size is
   known. Hence, NumPy offers several functions to create arrays with
   initial placeholder content. These minimize the necessity of growing
   arrays, an expensive operation.

   The function zeros creates an array full of zeros, the function ones
   creates an array full of ones, and the function empty creates an array
   whose initial content is random and depends on the state of the memory.
   By default, the dtype of the created array is float64, but it can be
   specified via the key word argument dtype.
>>> np.zeros((3, 4))
array([[0., 0., 0., 0.],
       [0., 0., 0., 0.],
       [0., 0., 0., 0.]])
>>> np.ones((2, 3, 4), dtype=np.int16)
array([[[1, 1, 1, 1],
        [1, 1, 1, 1],
        [1, 1, 1, 1]],

       [[1, 1, 1, 1],
        [1, 1, 1, 1],
        [1, 1, 1, 1]]], dtype=int16)
>>> np.empty((2, 3))
array([[3.73603959e-262, 6.02658058e-154, 6.55490914e-260],  # may vary
       [5.30498948e-313, 3.14673309e-307, 1.00000000e+000]])

   To create sequences of numbers, NumPy provides the arange function
   which is analogous to the Python built-in range, but returns an array.
>>> np.arange(10, 30, 5)
array([10, 15, 20, 25])
>>> np.arange(0, 2, 0.3)  # it accepts float arguments
array([0. , 0.3, 0.6, 0.9, 1.2, 1.5, 1.8])

   When arange is used with floating point arguments, it is generally not
   possible to predict the number of elements obtained, due to the finite
   floating point precision. For this reason, it is usually better to use
   the function linspace that receives as an argument the number of
   elements that we want, instead of the step:
>>> from numpy import pi
>>> np.linspace(0, 2, 9)                   # 9 numbers from 0 to 2
array([0.  , 0.25, 0.5 , 0.75, 1.  , 1.25, 1.5 , 1.75, 2.  ])
>>> x = np.linspace(0, 2 * pi, 100)        # useful to evaluate function at lots
 of points
>>> f = np.sin(x)

   See also

   [66]array, [67]zeros, [68]zeros_like, [69]ones, [70]ones_like,
   [71]empty, [72]empty_like, [73]arange, [74]linspace,
   numpy.random.Generator.rand, numpy.random.Generator.randn,
   [75]fromfunction, [76]fromfile

Printing Arrays[77]¶

   When you print an array, NumPy displays it in a similar way to nested
   lists, but with the following layout:
     * the last axis is printed from left to right,
     * the second-to-last is printed from top to bottom,
     * the rest are also printed from top to bottom, with each slice
       separated from the next by an empty line.

   One-dimensional arrays are then printed as rows, bidimensionals as
   matrices and tridimensionals as lists of matrices.
>>> a = np.arange(6)                    # 1d array
>>> print(a)
[0 1 2 3 4 5]
>>>
>>> b = np.arange(12).reshape(4, 3)     # 2d array
>>> print(b)
[[ 0  1  2]
 [ 3  4  5]
 [ 6  7  8]
 [ 9 10 11]]
>>>
>>> c = np.arange(24).reshape(2, 3, 4)  # 3d array
>>> print(c)
[[[ 0  1  2  3]
  [ 4  5  6  7]
  [ 8  9 10 11]]

 [[12 13 14 15]
  [16 17 18 19]
  [20 21 22 23]]]

   See [78]below to get more details on reshape.

   If an array is too large to be printed, NumPy automatically skips the
   central part of the array and only prints the corners:
>>> print(np.arange(10000))
[   0    1    2 ... 9997 9998 9999]
>>>
>>> print(np.arange(10000).reshape(100, 100))
[[   0    1    2 ...   97   98   99]
 [ 100  101  102 ...  197  198  199]
 [ 200  201  202 ...  297  298  299]
 ...
 [9700 9701 9702 ... 9797 9798 9799]
 [9800 9801 9802 ... 9897 9898 9899]
 [9900 9901 9902 ... 9997 9998 9999]]

   To disable this behaviour and force NumPy to print the entire array,
   you can change the printing options using set_printoptions.
>>> np.set_printoptions(threshold=sys.maxsize)  # sys module should be imported

Basic Operations[79]¶

   Arithmetic operators on arrays apply elementwise. A new array is
   created and filled with the result.
>>> a = np.array([20, 30, 40, 50])
>>> b = np.arange(4)
>>> b
array([0, 1, 2, 3])
>>> c = a - b
>>> c
array([20, 29, 38, 47])
>>> b**2
array([0, 1, 4, 9])
>>> 10 * np.sin(a)
array([ 9.12945251, -9.88031624,  7.4511316 , -2.62374854])
>>> a < 35
array([ True,  True, False, False])

   Unlike in many matrix languages, the product operator * operates
   elementwise in NumPy arrays. The matrix product can be performed using
   the @ operator (in python >=3.5) or the dot function or method:
>>> A = np.array([[1, 1],
...               [0, 1]])
>>> B = np.array([[2, 0],
...               [3, 4]])
>>> A * B     # elementwise product
array([[2, 0],
       [0, 4]])
>>> A @ B     # matrix product
array([[5, 4],
       [3, 4]])
>>> A.dot(B)  # another matrix product
array([[5, 4],
       [3, 4]])

   Some operations, such as += and *=, act in place to modify an existing
   array rather than create a new one.
>>> rg = np.random.default_rng(1)  # create instance of default random number ge
nerator
>>> a = np.ones((2, 3), dtype=int)
>>> b = rg.random((2, 3))
>>> a *= 3
>>> a
array([[3, 3, 3],
       [3, 3, 3]])
>>> b += a
>>> b
array([[3.51182162, 3.9504637 , 3.14415961],
       [3.94864945, 3.31183145, 3.42332645]])
>>> a += b  # b is not automatically converted to integer type
Traceback (most recent call last):
    ...
numpy.core._exceptions._UFuncOutputCastingError: Cannot cast ufunc 'add' output
from dtype('float64') to dtype('int64') with casting rule 'same_kind'

   When operating with arrays of different types, the type of the
   resulting array corresponds to the more general or precise one (a
   behavior known as upcasting).
>>> a = np.ones(3, dtype=np.int32)
>>> b = np.linspace(0, pi, 3)
>>> b.dtype.name
'float64'
>>> c = a + b
>>> c
array([1.        , 2.57079633, 4.14159265])
>>> c.dtype.name
'float64'
>>> d = np.exp(c * 1j)
>>> d
array([ 0.54030231+0.84147098j, -0.84147098+0.54030231j,
       -0.54030231-0.84147098j])
>>> d.dtype.name
'complex128'

   Many unary operations, such as computing the sum of all the elements in
   the array, are implemented as methods of the ndarray class.
>>> a = rg.random((2, 3))
>>> a
array([[0.82770259, 0.40919914, 0.54959369],
       [0.02755911, 0.75351311, 0.53814331]])
>>> a.sum()
3.1057109529998157
>>> a.min()
0.027559113243068367
>>> a.max()
0.8277025938204418

   By default, these operations apply to the array as though it were a
   list of numbers, regardless of its shape. However, by specifying the
   axis parameter you can apply an operation along the specified axis of
   an array:
>>> b = np.arange(12).reshape(3, 4)
>>> b
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
>>>
>>> b.sum(axis=0)     # sum of each column
array([12, 15, 18, 21])
>>>
>>> b.min(axis=1)     # min of each row
array([0, 4, 8])
>>>
>>> b.cumsum(axis=1)  # cumulative sum along each row
array([[ 0,  1,  3,  6],
       [ 4,  9, 15, 22],
       [ 8, 17, 27, 38]])

Universal Functions[80]¶

   NumPy provides familiar mathematical functions such as sin, cos, and
   exp. In NumPy, these are called “universal functions” (ufunc). Within
   NumPy, these functions operate elementwise on an array, producing an
   array as output.
>>> B = np.arange(3)
>>> B
array([0, 1, 2])
>>> np.exp(B)
array([1.        , 2.71828183, 7.3890561 ])
>>> np.sqrt(B)
array([0.        , 1.        , 1.41421356])
>>> C = np.array([2., -1., 4.])
>>> np.add(B, C)
array([2., 0., 6.])

   See also

   [81]all, [82]any, [83]apply_along_axis, [84]argmax, [85]argmin,
   [86]argsort, [87]average, [88]bincount, [89]ceil, [90]clip, [91]conj,
   [92]corrcoef, [93]cov, [94]cross, [95]cumprod, [96]cumsum, [97]diff,
   [98]dot, [99]floor, [100]inner, [101]invert, [102]lexsort, [103]max,
   [104]maximum, [105]mean, [106]median, [107]min, [108]minimum,
   [109]nonzero, [110]outer, [111]prod, [112]re, [113]round, [114]sort,
   [115]std, [116]sum, [117]trace, [118]transpose, [119]var, [120]vdot,
   [121]vectorize, [122]where

Indexing, Slicing and Iterating[123]¶

   One-dimensional arrays can be indexed, sliced and iterated over, much
   like [124]lists and other Python sequences.
>>> a = np.arange(10)**3
>>> a
array([  0,   1,   8,  27,  64, 125, 216, 343, 512, 729])
>>> a[2]
8
>>> a[2:5]
array([ 8, 27, 64])
>>> # equivalent to a[0:6:2] = 1000;
>>> # from start to position 6, exclusive, set every 2nd element to 1000
>>> a[:6:2] = 1000
>>> a
array([1000,    1, 1000,   27, 1000,  125,  216,  343,  512,  729])
>>> a[::-1]  # reversed a
array([ 729,  512,  343,  216,  125, 1000,   27, 1000,    1, 1000])
>>> for i in a:
...     print(i**(1 / 3.))
...
9.999999999999998
1.0
9.999999999999998
3.0
9.999999999999998
4.999999999999999
5.999999999999999
6.999999999999999
7.999999999999999
8.999999999999998

   Multidimensional arrays can have one index per axis. These indices are
   given in a tuple separated by commas:
>>> def f(x, y):
...     return 10 * x + y
...
>>> b = np.fromfunction(f, (5, 4), dtype=int)
>>> b
array([[ 0,  1,  2,  3],
       [10, 11, 12, 13],
       [20, 21, 22, 23],
       [30, 31, 32, 33],
       [40, 41, 42, 43]])
>>> b[2, 3]
23
>>> b[0:5, 1]  # each row in the second column of b
array([ 1, 11, 21, 31, 41])
>>> b[:, 1]    # equivalent to the previous example
array([ 1, 11, 21, 31, 41])
>>> b[1:3, :]  # each column in the second and third row of b
array([[10, 11, 12, 13],
       [20, 21, 22, 23]])

   When fewer indices are provided than the number of axes, the missing
   indices are considered complete slices:
>>> b[-1]   # the last row. Equivalent to b[-1, :]
array([40, 41, 42, 43])

   The expression within brackets in b[i] is treated as an i followed by
   as many instances of : as needed to represent the remaining axes. NumPy
   also allows you to write this using dots as b[i, ...].

   The dots (...) represent as many colons as needed to produce a complete
   indexing tuple. For example, if x is an array with 5 axes, then
     * x[1, 2, ...] is equivalent to x[1, 2, :, :, :],
     * x[..., 3] to x[:, :, :, :, 3] and
     * x[4, ..., 5, :] to x[4, :, :, 5, :].

>>> c = np.array([[[  0,  1,  2],  # a 3D array (two stacked 2D arrays)
...                [ 10, 12, 13]],
...               [[100, 101, 102],
...                [110, 112, 113]]])
>>> c.shape
(2, 2, 3)
>>> c[1, ...]  # same as c[1, :, :] or c[1]
array([[100, 101, 102],
       [110, 112, 113]])
>>> c[..., 2]  # same as c[:, :, 2]
array([[  2,  13],
       [102, 113]])

   Iterating over multidimensional arrays is done with respect to the
   first axis:
>>> for row in b:
...     print(row)
...
[0 1 2 3]
[10 11 12 13]
[20 21 22 23]
[30 31 32 33]
[40 41 42 43]

   However, if one wants to perform an operation on each element in the
   array, one can use the flat attribute which is an [125]iterator over
   all the elements of the array:
>>> for element in b.flat:
...     print(element)
...
0
1
2
3
10
11
12
13
20
21
22
23
30
31
32
33
40
41
42
43

   See also

   [126]Indexing, [127]Indexing (reference), [128]newaxis,
   [129]ndenumerate, [130]indices

Shape Manipulation[131]¶

Changing the shape of an array[132]¶

   An array has a shape given by the number of elements along each axis:
>>> a = np.floor(10 * rg.random((3, 4)))
>>> a
array([[3., 7., 3., 4.],
       [1., 4., 2., 2.],
       [7., 2., 4., 9.]])
>>> a.shape
(3, 4)

   The shape of an array can be changed with various commands. Note that
   the following three commands all return a modified array, but do not
   change the original array:
>>> a.ravel()  # returns the array, flattened
array([3., 7., 3., 4., 1., 4., 2., 2., 7., 2., 4., 9.])
>>> a.reshape(6, 2)  # returns the array with a modified shape
array([[3., 7.],
       [3., 4.],
       [1., 4.],
       [2., 2.],
       [7., 2.],
       [4., 9.]])
>>> a.T  # returns the array, transposed
array([[3., 1., 7.],
       [7., 4., 2.],
       [3., 2., 4.],
       [4., 2., 9.]])
>>> a.T.shape
(4, 3)
>>> a.shape
(3, 4)

   The order of the elements in the array resulting from ravel is normally
   “C-style”, that is, the rightmost index “changes the fastest”, so the
   element after a[0, 0] is a[0, 1]. If the array is reshaped to some
   other shape, again the array is treated as “C-style”. NumPy normally
   creates arrays stored in this order, so ravel will usually not need to
   copy its argument, but if the array was made by taking slices of
   another array or created with unusual options, it may need to be
   copied. The functions ravel and reshape can also be instructed, using
   an optional argument, to use FORTRAN-style arrays, in which the
   leftmost index changes the fastest.

   The [133]reshape function returns its argument with a modified shape,
   whereas the [134]ndarray.resize method modifies the array itself:
>>> a
array([[3., 7., 3., 4.],
       [1., 4., 2., 2.],
       [7., 2., 4., 9.]])
>>> a.resize((2, 6))
>>> a
array([[3., 7., 3., 4., 1., 4.],
       [2., 2., 7., 2., 4., 9.]])

   If a dimension is given as -1 in a reshaping operation, the other
   dimensions are automatically calculated:
>>> a.reshape(3, -1)
array([[3., 7., 3., 4.],
       [1., 4., 2., 2.],
       [7., 2., 4., 9.]])

   See also

   [135]ndarray.shape, [136]reshape, [137]resize, [138]ravel

Stacking together different arrays[139]¶

   Several arrays can be stacked together along different axes:
>>> a = np.floor(10 * rg.random((2, 2)))
>>> a
array([[9., 7.],
       [5., 2.]])
>>> b = np.floor(10 * rg.random((2, 2)))
>>> b
array([[1., 9.],
       [5., 1.]])
>>> np.vstack((a, b))
array([[9., 7.],
       [5., 2.],
       [1., 9.],
       [5., 1.]])
>>> np.hstack((a, b))
array([[9., 7., 1., 9.],
       [5., 2., 5., 1.]])

   The function [140]column_stack stacks 1D arrays as columns into a 2D
   array. It is equivalent to [141]hstack only for 2D arrays:
>>> from numpy import newaxis
>>> np.column_stack((a, b))  # with 2D arrays
array([[9., 7., 1., 9.],
       [5., 2., 5., 1.]])
>>> a = np.array([4., 2.])
>>> b = np.array([3., 8.])
>>> np.column_stack((a, b))  # returns a 2D array
array([[4., 3.],
       [2., 8.]])
>>> np.hstack((a, b))        # the result is different
array([4., 2., 3., 8.])
>>> a[:, newaxis]  # view `a` as a 2D column vector
array([[4.],
       [2.]])
>>> np.column_stack((a[:, newaxis], b[:, newaxis]))
array([[4., 3.],
       [2., 8.]])
>>> np.hstack((a[:, newaxis], b[:, newaxis]))  # the result is the same
array([[4., 3.],
       [2., 8.]])

   On the other hand, the function [142]row_stack is equivalent to
   [143]vstack for any input arrays. In fact, [144]row_stack is an alias
   for [145]vstack:
>>> np.column_stack is np.hstack
False
>>> np.row_stack is np.vstack
True

   In general, for arrays with more than two dimensions, [146]hstack
   stacks along their second axes, [147]vstack stacks along their first
   axes, and [148]concatenate allows for an optional arguments giving the
   number of the axis along which the concatenation should happen.

   Note

   In complex cases, [149]r_ and [150]c_ are useful for creating arrays by
   stacking numbers along one axis. They allow the use of range literals
   :.
>>> np.r_[1:4, 0, 4]
array([1, 2, 3, 0, 4])

   When used with arrays as arguments, [151]r_ and [152]c_ are similar to
   [153]vstack and [154]hstack in their default behavior, but allow for an
   optional argument giving the number of the axis along which to
   concatenate.

   See also

   [155]hstack, [156]vstack, [157]column_stack, [158]concatenate, [159]c_,
   [160]r_

Splitting one array into several smaller ones[161]¶

   Using [162]hsplit, you can split an array along its horizontal axis,
   either by specifying the number of equally shaped arrays to return, or
   by specifying the columns after which the division should occur:
>>> a = np.floor(10 * rg.random((2, 12)))
>>> a
array([[6., 7., 6., 9., 0., 5., 4., 0., 6., 8., 5., 2.],
       [8., 5., 5., 7., 1., 8., 6., 7., 1., 8., 1., 0.]])
>>> # Split `a` into 3
>>> np.hsplit(a, 3)
[array([[6., 7., 6., 9.],
       [8., 5., 5., 7.]]), array([[0., 5., 4., 0.],
       [1., 8., 6., 7.]]), array([[6., 8., 5., 2.],
       [1., 8., 1., 0.]])]
>>> # Split `a` after the third and the fourth column
>>> np.hsplit(a, (3, 4))
[array([[6., 7., 6.],
       [8., 5., 5.]]), array([[9.],
       [7.]]), array([[0., 5., 4., 0., 6., 8., 5., 2.],
       [1., 8., 6., 7., 1., 8., 1., 0.]])]

   [163]vsplit splits along the vertical axis, and [164]array_split allows
   one to specify along which axis to split.

Copies and Views[165]¶

   When operating and manipulating arrays, their data is sometimes copied
   into a new array and sometimes not. This is often a source of confusion
   for beginners. There are three cases:

No Copy at All[166]¶

   Simple assignments make no copy of objects or their data.
>>> a = np.array([[ 0,  1,  2,  3],
...               [ 4,  5,  6,  7],
...               [ 8,  9, 10, 11]])
>>> b = a            # no new object is created
>>> b is a           # a and b are two names for the same ndarray object
True

   Python passes mutable objects as references, so function calls make no
   copy.
>>> def f(x):
...     print(id(x))
...
>>> id(a)  # id is a unique identifier of an object
148293216  # may vary
>>> f(a)
148293216  # may vary

View or Shallow Copy[167]¶

   Different array objects can share the same data. The view method
   creates a new array object that looks at the same data.
>>> c = a.view()
>>> c is a
False
>>> c.base is a            # c is a view of the data owned by a
True
>>> c.flags.owndata
False
>>>
>>> c = c.reshape((2, 6))  # a's shape doesn't change
>>> a.shape
(3, 4)
>>> c[0, 4] = 1234         # a's data changes
>>> a
array([[   0,    1,    2,    3],
       [1234,    5,    6,    7],
       [   8,    9,   10,   11]])

   Slicing an array returns a view of it:
>>> s = a[:, 1:3]
>>> s[:] = 10  # s[:] is a view of s. Note the difference between s = 10 and s[:
] = 10
>>> a
array([[   0,   10,   10,    3],
       [1234,   10,   10,    7],
       [   8,   10,   10,   11]])

Deep Copy[168]¶

   The copy method makes a complete copy of the array and its data.
>>> d = a.copy()  # a new array object with new data is created
>>> d is a
False
>>> d.base is a  # d doesn't share anything with a
False
>>> d[0, 0] = 9999
>>> a
array([[   0,   10,   10,    3],
       [1234,   10,   10,    7],
       [   8,   10,   10,   11]])

   Sometimes copy should be called after slicing if the original array is
   not required anymore. For example, suppose a is a huge intermediate
   result and the final result b only contains a small fraction of a, a
   deep copy should be made when constructing b with slicing:
>>> a = np.arange(int(1e8))
>>> b = a[:100].copy()
>>> del a  # the memory of ``a`` can be released.

   If b = a[:100] is used instead, a is referenced by b and will persist
   in memory even if del a is executed.

Functions and Methods Overview[169]¶

   Here is a list of some useful NumPy functions and methods names ordered
   in categories. See [170]Routines for the full list.

   Array Creation
          [171]arange, [172]array, [173]copy, [174]empty, [175]empty_like,
          [176]eye, [177]fromfile, [178]fromfunction, [179]identity,
          [180]linspace, [181]logspace, [182]mgrid, [183]ogrid, [184]ones,
          [185]ones_like, [186]r_, [187]zeros, [188]zeros_like

   Conversions
          [189]ndarray.astype, [190]atleast_1d, [191]atleast_2d,
          [192]atleast_3d, [193]mat

   Manipulations
          [194]array_split, [195]column_stack, [196]concatenate,
          [197]diagonal, [198]dsplit, [199]dstack, [200]hsplit,
          [201]hstack, [202]ndarray.item, [203]newaxis, [204]ravel,
          [205]repeat, [206]reshape, [207]resize, [208]squeeze,
          [209]swapaxes, [210]take, [211]transpose, [212]vsplit,
          [213]vstack

   Questions
          [214]all, [215]any, [216]nonzero, [217]where

   Ordering
          [218]argmax, [219]argmin, [220]argsort, [221]max, [222]min,
          [223]ptp, [224]searchsorted, [225]sort

   Operations
          [226]choose, [227]compress, [228]cumprod, [229]cumsum,
          [230]inner, [231]ndarray.fill, [232]imag, [233]prod, [234]put,
          [235]putmask, [236]real, [237]sum

   Basic Statistics
          [238]cov, [239]mean, [240]std, [241]var

   Basic Linear Algebra
          [242]cross, [243]dot, [244]outer, [245]linalg.svd, [246]vdot

Less Basic[247]¶

Broadcasting rules[248]¶

   Broadcasting allows universal functions to deal in a meaningful way
   with inputs that do not have exactly the same shape.

   The first rule of broadcasting is that if all input arrays do not have
   the same number of dimensions, a “1” will be repeatedly prepended to
   the shapes of the smaller arrays until all the arrays have the same
   number of dimensions.

   The second rule of broadcasting ensures that arrays with a size of 1
   along a particular dimension act as if they had the size of the array
   with the largest shape along that dimension. The value of the array
   element is assumed to be the same along that dimension for the
   “broadcast” array.

   After application of the broadcasting rules, the sizes of all arrays
   must match. More details can be found in [249]Broadcasting.

Advanced indexing and index tricks[250]¶

   NumPy offers more indexing facilities than regular Python sequences. In
   addition to indexing by integers and slices, as we saw before, arrays
   can be indexed by arrays of integers and arrays of booleans.

Indexing with Arrays of Indices[251]¶

>>> a = np.arange(12)**2  # the first 12 square numbers
>>> i = np.array([1, 1, 3, 8, 5])  # an array of indices
>>> a[i]  # the elements of `a` at the positions `i`
array([ 1,  1,  9, 64, 25])
>>>
>>> j = np.array([[3, 4], [9, 7]])  # a bidimensional array of indices
>>> a[j]  # the same shape as `j`
array([[ 9, 16],
       [81, 49]])

   When the indexed array a is multidimensional, a single array of indices
   refers to the first dimension of a. The following example shows this
   behavior by converting an image of labels into a color image using a
   palette.
>>> palette = np.array([[0, 0, 0],         # black
...                     [255, 0, 0],       # red
...                     [0, 255, 0],       # green
...                     [0, 0, 255],       # blue
...                     [255, 255, 255]])  # white
>>> image = np.array([[0, 1, 2, 0],  # each value corresponds to a color in the
palette
...                   [0, 3, 4, 0]])
>>> palette[image]  # the (2, 4, 3) color image
array([[[  0,   0,   0],
        [255,   0,   0],
        [  0, 255,   0],
        [  0,   0,   0]],

       [[  0,   0,   0],
        [  0,   0, 255],
        [255, 255, 255],
        [  0,   0,   0]]])

   We can also give indexes for more than one dimension. The arrays of
   indices for each dimension must have the same shape.
>>> a = np.arange(12).reshape(3, 4)
>>> a
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
>>> i = np.array([[0, 1],  # indices for the first dim of `a`
...               [1, 2]])
>>> j = np.array([[2, 1],  # indices for the second dim
...               [3, 3]])
>>>
>>> a[i, j]  # i and j must have equal shape
array([[ 2,  5],
       [ 7, 11]])
>>>
>>> a[i, 2]
array([[ 2,  6],
       [ 6, 10]])
>>>
>>> a[:, j]
array([[[ 2,  1],
        [ 3,  3]],

       [[ 6,  5],
        [ 7,  7]],

       [[10,  9],
        [11, 11]]])

   In Python, arr[i, j] is exactly the same as arr[(i, j)]—so we can put i
   and j in a tuple and then do the indexing with that.
>>> l = (i, j)
>>> # equivalent to a[i, j]
>>> a[l]
array([[ 2,  5],
       [ 7, 11]])

   However, we can not do this by putting i and j into an array, because
   this array will be interpreted as indexing the first dimension of a.
>>> s = np.array([i, j])
>>> # not what we want
>>> a[s]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: index 3 is out of bounds for axis 0 with size 3
>>> # same as `a[i, j]`
>>> a[tuple(s)]
array([[ 2,  5],
       [ 7, 11]])

   Another common use of indexing with arrays is the search of the maximum
   value of time-dependent series:
>>> time = np.linspace(20, 145, 5)  # time scale
>>> data = np.sin(np.arange(20)).reshape(5, 4)  # 4 time-dependent series
>>> time
array([ 20.  ,  51.25,  82.5 , 113.75, 145.  ])
>>> data
array([[ 0.        ,  0.84147098,  0.90929743,  0.14112001],
       [-0.7568025 , -0.95892427, -0.2794155 ,  0.6569866 ],
       [ 0.98935825,  0.41211849, -0.54402111, -0.99999021],
       [-0.53657292,  0.42016704,  0.99060736,  0.65028784],
       [-0.28790332, -0.96139749, -0.75098725,  0.14987721]])
>>> # index of the maxima for each series
>>> ind = data.argmax(axis=0)
>>> ind
array([2, 0, 3, 1])
>>> # times corresponding to the maxima
>>> time_max = time[ind]
>>>
>>> data_max = data[ind, range(data.shape[1])]  # => data[ind[0], 0], data[ind[1
], 1]...
>>> time_max
array([ 82.5 ,  20.  , 113.75,  51.25])
>>> data_max
array([0.98935825, 0.84147098, 0.99060736, 0.6569866 ])
>>> np.all(data_max == data.max(axis=0))
True

   You can also use indexing with arrays as a target to assign to:
>>> a = np.arange(5)
>>> a
array([0, 1, 2, 3, 4])
>>> a[[1, 3, 4]] = 0
>>> a
array([0, 0, 2, 0, 0])

   However, when the list of indices contains repetitions, the assignment
   is done several times, leaving behind the last value:
>>> a = np.arange(5)
>>> a[[0, 0, 2]] = [1, 2, 3]
>>> a
array([2, 1, 3, 3, 4])

   This is reasonable enough, but watch out if you want to use Python’s +=
   construct, as it may not do what you expect:
>>> a = np.arange(5)
>>> a[[0, 0, 2]] += 1
>>> a
array([1, 1, 3, 3, 4])

   Even though 0 occurs twice in the list of indices, the 0th element is
   only incremented once. This is because Python requires a += 1 to be
   equivalent to a = a + 1.

Indexing with Boolean Arrays[252]¶

   When we index arrays with arrays of (integer) indices we are providing
   the list of indices to pick. With boolean indices the approach is
   different; we explicitly choose which items in the array we want and
   which ones we don’t.

   The most natural way one can think of for boolean indexing is to use
   boolean arrays that have the same shape as the original array:
>>> a = np.arange(12).reshape(3, 4)
>>> b = a > 4
>>> b  # `b` is a boolean with `a`'s shape
array([[False, False, False, False],
       [False,  True,  True,  True],
       [ True,  True,  True,  True]])
>>> a[b]  # 1d array with the selected elements
array([ 5,  6,  7,  8,  9, 10, 11])

   This property can be very useful in assignments:
>>> a[b] = 0  # All elements of `a` higher than 4 become 0
>>> a
array([[0, 1, 2, 3],
       [4, 0, 0, 0],
       [0, 0, 0, 0]])

   You can look at the following example to see how to use boolean
   indexing to generate an image of the [253]Mandelbrot set:
>>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> def mandelbrot(h, w, maxit=20, r=2):
...     """Returns an image of the Mandelbrot fractal of size (h,w)."""
...     x = np.linspace(-2.5, 1.5, 4*h+1)
...     y = np.linspace(-1.5, 1.5, 3*w+1)
...     A, B = np.meshgrid(x, y)
...     C = A + B*1j
...     z = np.zeros_like(C)
...     divtime = maxit + np.zeros(z.shape, dtype=int)
...
...     for i in range(maxit):
...         z = z**2 + C
...         diverge = abs(z) > r                    # who is diverging
...         div_now = diverge & (divtime == maxit)  # who is diverging now
...         divtime[div_now] = i                    # note when
...         z[diverge] = r                          # avoid diverging too much
...
...     return divtime
>>> plt.imshow(mandelbrot(400, 400))

   ../_images/quickstart-1.png

   The second way of indexing with booleans is more similar to integer
   indexing; for each dimension of the array we give a 1D boolean array
   selecting the slices we want:
>>> a = np.arange(12).reshape(3, 4)
>>> b1 = np.array([False, True, True])         # first dim selection
>>> b2 = np.array([True, False, True, False])  # second dim selection
>>>
>>> a[b1, :]                                   # selecting rows
array([[ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
>>>
>>> a[b1]                                      # same thing
array([[ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
>>>
>>> a[:, b2]                                   # selecting columns
array([[ 0,  2],
       [ 4,  6],
       [ 8, 10]])
>>>
>>> a[b1, b2]                                  # a weird thing to do
array([ 4, 10])

   Note that the length of the 1D boolean array must coincide with the
   length of the dimension (or axis) you want to slice. In the previous
   example, b1 has length 3 (the number of rows in a), and b2 (of length
   4) is suitable to index the 2nd axis (columns) of a.

The ix_() function[254]¶

   The [255]ix_ function can be used to combine different vectors so as to
   obtain the result for each n-uplet. For example, if you want to compute
   all the a+b*c for all the triplets taken from each of the vectors a, b
   and c:
>>> a = np.array([2, 3, 4, 5])
>>> b = np.array([8, 5, 4])
>>> c = np.array([5, 4, 6, 8, 3])
>>> ax, bx, cx = np.ix_(a, b, c)
>>> ax
array([[[2]],

       [[3]],

       [[4]],

       [[5]]])
>>> bx
array([[[8],
        [5],
        [4]]])
>>> cx
array([[[5, 4, 6, 8, 3]]])
>>> ax.shape, bx.shape, cx.shape
((4, 1, 1), (1, 3, 1), (1, 1, 5))
>>> result = ax + bx * cx
>>> result
array([[[42, 34, 50, 66, 26],
        [27, 22, 32, 42, 17],
        [22, 18, 26, 34, 14]],

       [[43, 35, 51, 67, 27],
        [28, 23, 33, 43, 18],
        [23, 19, 27, 35, 15]],

       [[44, 36, 52, 68, 28],
        [29, 24, 34, 44, 19],
        [24, 20, 28, 36, 16]],

       [[45, 37, 53, 69, 29],
        [30, 25, 35, 45, 20],
        [25, 21, 29, 37, 17]]])
>>> result[3, 2, 4]
17
>>> a[3] + b[2] * c[4]
17

   You could also implement the reduce as follows:
>>> def ufunc_reduce(ufct, *vectors):
...    vs = np.ix_(*vectors)
...    r = ufct.identity
...    for v in vs:
...        r = ufct(r, v)
...    return r

   and then use it as:
>>> ufunc_reduce(np.add, a, b, c)
array([[[15, 14, 16, 18, 13],
        [12, 11, 13, 15, 10],
        [11, 10, 12, 14,  9]],

       [[16, 15, 17, 19, 14],
        [13, 12, 14, 16, 11],
        [12, 11, 13, 15, 10]],

       [[17, 16, 18, 20, 15],
        [14, 13, 15, 17, 12],
        [13, 12, 14, 16, 11]],

       [[18, 17, 19, 21, 16],
        [15, 14, 16, 18, 13],
        [14, 13, 15, 17, 12]]])

   The advantage of this version of reduce compared to the normal
   ufunc.reduce is that it makes use of the [256]broadcasting rules in
   order to avoid creating an argument array the size of the output times
   the number of vectors.

Indexing with strings[257]¶

   See [258]Structured arrays.

Tricks and Tips[259]¶

   Here we give a list of short and useful tips.

“Automatic” Reshaping[260]¶

   To change the dimensions of an array, you can omit one of the sizes
   which will then be deduced automatically:
>>> a = np.arange(30)
>>> b = a.reshape((2, -1, 3))  # -1 means "whatever is needed"
>>> b.shape
(2, 5, 3)
>>> b
array([[[ 0,  1,  2],
        [ 3,  4,  5],
        [ 6,  7,  8],
        [ 9, 10, 11],
        [12, 13, 14]],

       [[15, 16, 17],
        [18, 19, 20],
        [21, 22, 23],
        [24, 25, 26],
        [27, 28, 29]]])

Vector Stacking[261]¶

   How do we construct a 2D array from a list of equally-sized row
   vectors? In MATLAB this is quite easy: if x and y are two vectors of
   the same length you only need do m=[x;y]. In NumPy this works via the
   functions column_stack, dstack, hstack and vstack, depending on the
   dimension in which the stacking is to be done. For example:
>>> x = np.arange(0, 10, 2)
>>> y = np.arange(5)
>>> m = np.vstack([x, y])
>>> m
array([[0, 2, 4, 6, 8],
       [0, 1, 2, 3, 4]])
>>> xy = np.hstack([x, y])
>>> xy
array([0, 2, 4, 6, 8, 0, 1, 2, 3, 4])

   The logic behind those functions in more than two dimensions can be
   strange.

   See also

   [262]NumPy for MATLAB users

Histograms[263]¶

   The NumPy histogram function applied to an array returns a pair of
   vectors: the histogram of the array and a vector of the bin edges.
   Beware: matplotlib also has a function to build histograms (called
   hist, as in Matlab) that differs from the one in NumPy. The main
   difference is that pylab.hist plots the histogram automatically, while
   numpy.histogram only generates the data.
>>> import numpy as np
>>> rg = np.random.default_rng(1)
>>> import matplotlib.pyplot as plt
>>> # Build a vector of 10000 normal deviates with variance 0.5^2 and mean 2
>>> mu, sigma = 2, 0.5
>>> v = rg.normal(mu, sigma, 10000)
>>> # Plot a normalized histogram with 50 bins
>>> plt.hist(v, bins=50, density=True)       # matplotlib version (plot)
>>> # Compute the histogram with numpy and then plot it
>>> (n, bins) = np.histogram(v, bins=50, density=True)  # NumPy version (no plot
)
>>> plt.plot(.5 * (bins[1:] + bins[:-1]), n)

   ../_images/quickstart-2.png

   With Matplotlib >=3.4 you can also use plt.stairs(n, bins).

Further reading[264]¶

     * The [265]Python tutorial
     * [266]Command Reference
     * [267]SciPy Tutorial
     * [268]SciPy Lecture Notes
     * A [269]matlab, R, IDL, NumPy/SciPy dictionary
     * [270]Tutorial: Linear algebra on n-dimensional arrays

   [271]What is NumPy? [272]NumPy: the absolute basics for beginners

   © Copyright 2008-2021, The NumPy community.
   Last updated on Jun 22, 2021.
   Created using [273]Sphinx 4.0.1.

References

   1. https://numpy.org/doc/1.21/genindex.html
   2. https://numpy.org/doc/1.21/search.html
   3. https://numpy.org/doc/1.21/user/absolute_beginners.html
   4. https://numpy.org/doc/1.21/user/whatisnumpy.html
   5. https://numpy.org/doc/1.21/index.html
   6. https://numpy.org/doc/1.21/user/index.html
   7. https://numpy.org/doc/1.21/reference/index.html
   8. https://numpy.org/doc/1.21/dev/index.html
   9. https://github.com/numpy/numpy
  10. https://twitter.com/numpy_team
  11. https://numpy.org/doc/1.21/user/whatisnumpy.html
  12. https://numpy.org/install/
  13. https://numpy.org/doc/1.21/user/quickstart.html
  14. https://numpy.org/doc/1.21/user/absolute_beginners.html
  15. https://numpy.org/doc/1.21/user/basics.html
  16. https://numpy.org/doc/1.21/user/misc.html
  17. https://numpy.org/doc/1.21/user/numpy-for-matlab-users.html
  18. https://numpy.org/doc/1.21/user/building.html
  19. https://numpy.org/doc/1.21/user/c-info.html
  20. https://numpy.org/doc/1.21/user/tutorials_index.html
  21. https://numpy.org/doc/1.21/user/howtos_index.html
  22. https://numpy.org/doc/1.21/user/depending_on_numpy.html
  23. https://numpy.org/doc/1.21/f2py/index.html
  24. https://numpy.org/doc/1.21/glossary.html
  25. https://numpy.org/doc/1.21/dev/underthehood.html
  26. https://numpy.org/doc/1.21/docs/index.html
  27. https://numpy.org/doc/1.21/bugs.html
  28. https://numpy.org/doc/1.21/release.html
  29. https://numpy.org/doc/1.21/doc_conventions.html
  30. https://numpy.org/doc/1.21/license.html
  31. https://numpy.org/doc/1.21/user/quickstart.html#prerequisites
  32. https://numpy.org/doc/1.21/user/quickstart.html#the-basics
  33. https://numpy.org/doc/1.21/user/quickstart.html#an-example
  34. https://numpy.org/doc/1.21/user/quickstart.html#array-creation
  35. https://numpy.org/doc/1.21/user/quickstart.html#printing-arrays
  36. https://numpy.org/doc/1.21/user/quickstart.html#basic-operations
  37. https://numpy.org/doc/1.21/user/quickstart.html#universal-functions
  38. https://numpy.org/doc/1.21/user/quickstart.html#indexing-slicing-and-iterating
  39. https://numpy.org/doc/1.21/user/quickstart.html#shape-manipulation
  40. https://numpy.org/doc/1.21/user/quickstart.html#changing-the-shape-of-an-array
  41. https://numpy.org/doc/1.21/user/quickstart.html#stacking-together-different-arrays
  42. https://numpy.org/doc/1.21/user/quickstart.html#splitting-one-array-into-several-smaller-ones
  43. https://numpy.org/doc/1.21/user/quickstart.html#copies-and-views
  44. https://numpy.org/doc/1.21/user/quickstart.html#no-copy-at-all
  45. https://numpy.org/doc/1.21/user/quickstart.html#view-or-shallow-copy
  46. https://numpy.org/doc/1.21/user/quickstart.html#deep-copy
  47. https://numpy.org/doc/1.21/user/quickstart.html#functions-and-methods-overview
  48. https://numpy.org/doc/1.21/user/quickstart.html#less-basic
  49. https://numpy.org/doc/1.21/user/quickstart.html#broadcasting-rules
  50. https://numpy.org/doc/1.21/user/quickstart.html#advanced-indexing-and-index-tricks
  51. https://numpy.org/doc/1.21/user/quickstart.html#indexing-with-arrays-of-indices
  52. https://numpy.org/doc/1.21/user/quickstart.html#indexing-with-boolean-arrays
  53. https://numpy.org/doc/1.21/user/quickstart.html#the-ix-function
  54. https://numpy.org/doc/1.21/user/quickstart.html#indexing-with-strings
  55. https://numpy.org/doc/1.21/user/quickstart.html#tricks-and-tips
  56. https://numpy.org/doc/1.21/user/quickstart.html#automatic-reshaping
  57. https://numpy.org/doc/1.21/user/quickstart.html#vector-stacking
  58. https://numpy.org/doc/1.21/user/quickstart.html#histograms
  59. https://numpy.org/doc/1.21/user/quickstart.html#further-reading
  60. https://numpy.org/doc/1.21/user/quickstart.html#numpy-quickstart
  61. https://numpy.org/doc/1.21/user/quickstart.html#prerequisites
  62. https://docs.python.org/tutorial/
  63. https://numpy.org/doc/1.21/user/quickstart.html#the-basics
  64. https://numpy.org/doc/1.21/user/quickstart.html#an-example
  65. https://numpy.org/doc/1.21/user/quickstart.html#array-creation
  66. https://numpy.org/doc/1.21/reference/generated/numpy.array.html#numpy.array
  67. https://numpy.org/doc/1.21/reference/generated/numpy.zeros.html#numpy.zeros
  68. https://numpy.org/doc/1.21/reference/generated/numpy.zeros_like.html#numpy.zeros_like
  69. https://numpy.org/doc/1.21/reference/generated/numpy.ones.html#numpy.ones
  70. https://numpy.org/doc/1.21/reference/generated/numpy.ones_like.html#numpy.ones_like
  71. https://numpy.org/doc/1.21/reference/generated/numpy.empty.html#numpy.empty
  72. https://numpy.org/doc/1.21/reference/generated/numpy.empty_like.html#numpy.empty_like
  73. https://numpy.org/doc/1.21/reference/generated/numpy.arange.html#numpy.arange
  74. https://numpy.org/doc/1.21/reference/generated/numpy.linspace.html#numpy.linspace
  75. https://numpy.org/doc/1.21/reference/generated/numpy.fromfunction.html#numpy.fromfunction
  76. https://numpy.org/doc/1.21/reference/generated/numpy.fromfile.html#numpy.fromfile
  77. https://numpy.org/doc/1.21/user/quickstart.html#printing-arrays
  78. https://numpy.org/doc/1.21/user/quickstart.html#quickstart-shape-manipulation
  79. https://numpy.org/doc/1.21/user/quickstart.html#basic-operations
  80. https://numpy.org/doc/1.21/user/quickstart.html#universal-functions
  81. https://numpy.org/doc/1.21/reference/generated/numpy.all.html#numpy.all
  82. https://numpy.org/doc/1.21/reference/generated/numpy.any.html#numpy.any
  83. https://numpy.org/doc/1.21/reference/generated/numpy.apply_along_axis.html#numpy.apply_along_axis
  84. https://numpy.org/doc/1.21/reference/generated/numpy.argmax.html#numpy.argmax
  85. https://numpy.org/doc/1.21/reference/generated/numpy.argmin.html#numpy.argmin
  86. https://numpy.org/doc/1.21/reference/generated/numpy.argsort.html#numpy.argsort
  87. https://numpy.org/doc/1.21/reference/generated/numpy.average.html#numpy.average
  88. https://numpy.org/doc/1.21/reference/generated/numpy.bincount.html#numpy.bincount
  89. https://numpy.org/doc/1.21/reference/generated/numpy.ceil.html#numpy.ceil
  90. https://numpy.org/doc/1.21/reference/generated/numpy.clip.html#numpy.clip
  91. https://numpy.org/doc/1.21/reference/generated/numpy.conj.html#numpy.conj
  92. https://numpy.org/doc/1.21/reference/generated/numpy.corrcoef.html#numpy.corrcoef
  93. https://numpy.org/doc/1.21/reference/generated/numpy.cov.html#numpy.cov
  94. https://numpy.org/doc/1.21/reference/generated/numpy.cross.html#numpy.cross
  95. https://numpy.org/doc/1.21/reference/generated/numpy.cumprod.html#numpy.cumprod
  96. https://numpy.org/doc/1.21/reference/generated/numpy.cumsum.html#numpy.cumsum
  97. https://numpy.org/doc/1.21/reference/generated/numpy.diff.html#numpy.diff
  98. https://numpy.org/doc/1.21/reference/generated/numpy.dot.html#numpy.dot
  99. https://numpy.org/doc/1.21/reference/generated/numpy.floor.html#numpy.floor
 100. https://numpy.org/doc/1.21/reference/generated/numpy.inner.html#numpy.inner
 101. https://numpy.org/doc/1.21/reference/generated/numpy.invert.html#numpy.invert
 102. https://numpy.org/doc/1.21/reference/generated/numpy.lexsort.html#numpy.lexsort
 103. https://docs.python.org/dev/library/functions.html#max
 104. https://numpy.org/doc/1.21/reference/generated/numpy.maximum.html#numpy.maximum
 105. https://numpy.org/doc/1.21/reference/generated/numpy.mean.html#numpy.mean
 106. https://numpy.org/doc/1.21/reference/generated/numpy.median.html#numpy.median
 107. https://docs.python.org/dev/library/functions.html#min
 108. https://numpy.org/doc/1.21/reference/generated/numpy.minimum.html#numpy.minimum
 109. https://numpy.org/doc/1.21/reference/generated/numpy.nonzero.html#numpy.nonzero
 110. https://numpy.org/doc/1.21/reference/generated/numpy.outer.html#numpy.outer
 111. https://numpy.org/doc/1.21/reference/generated/numpy.prod.html#numpy.prod
 112. https://docs.python.org/dev/library/re.html#module-re
 113. https://docs.python.org/dev/library/functions.html#round
 114. https://numpy.org/doc/1.21/reference/generated/numpy.sort.html#numpy.sort
 115. https://numpy.org/doc/1.21/reference/generated/numpy.std.html#numpy.std
 116. https://numpy.org/doc/1.21/reference/generated/numpy.sum.html#numpy.sum
 117. https://numpy.org/doc/1.21/reference/generated/numpy.trace.html#numpy.trace
 118. https://numpy.org/doc/1.21/reference/generated/numpy.transpose.html#numpy.transpose
 119. https://numpy.org/doc/1.21/reference/generated/numpy.var.html#numpy.var
 120. https://numpy.org/doc/1.21/reference/generated/numpy.vdot.html#numpy.vdot
 121. https://numpy.org/doc/1.21/reference/generated/numpy.vectorize.html#numpy.vectorize
 122. https://numpy.org/doc/1.21/reference/generated/numpy.where.html#numpy.where
 123. https://numpy.org/doc/1.21/user/quickstart.html#indexing-slicing-and-iterating
 124. https://docs.python.org/tutorial/introduction.html#lists
 125. https://docs.python.org/tutorial/classes.html#iterators
 126. https://numpy.org/doc/1.21/user/basics.indexing.html#basics-indexing
 127. https://numpy.org/doc/1.21/reference/arrays.indexing.html#arrays-indexing
 128. https://numpy.org/doc/1.21/reference/constants.html#numpy.newaxis
 129. https://numpy.org/doc/1.21/reference/generated/numpy.ndenumerate.html#numpy.ndenumerate
 130. https://numpy.org/doc/1.21/reference/generated/numpy.indices.html#numpy.indices
 131. https://numpy.org/doc/1.21/user/quickstart.html#shape-manipulation
 132. https://numpy.org/doc/1.21/user/quickstart.html#changing-the-shape-of-an-array
 133. https://numpy.org/doc/1.21/reference/generated/numpy.reshape.html#numpy.reshape
 134. https://numpy.org/doc/1.21/reference/generated/numpy.ndarray.resize.html#numpy.ndarray.resize
 135. https://numpy.org/doc/1.21/reference/generated/numpy.ndarray.shape.html#numpy.ndarray.shape
 136. https://numpy.org/doc/1.21/reference/generated/numpy.reshape.html#numpy.reshape
 137. https://numpy.org/doc/1.21/reference/generated/numpy.resize.html#numpy.resize
 138. https://numpy.org/doc/1.21/reference/generated/numpy.ravel.html#numpy.ravel
 139. https://numpy.org/doc/1.21/user/quickstart.html#stacking-together-different-arrays
 140. https://numpy.org/doc/1.21/reference/generated/numpy.column_stack.html#numpy.column_stack
 141. https://numpy.org/doc/1.21/reference/generated/numpy.hstack.html#numpy.hstack
 142. https://numpy.org/doc/1.21/reference/generated/numpy.row_stack.html#numpy.row_stack
 143. https://numpy.org/doc/1.21/reference/generated/numpy.vstack.html#numpy.vstack
 144. https://numpy.org/doc/1.21/reference/generated/numpy.row_stack.html#numpy.row_stack
 145. https://numpy.org/doc/1.21/reference/generated/numpy.vstack.html#numpy.vstack
 146. https://numpy.org/doc/1.21/reference/generated/numpy.hstack.html#numpy.hstack
 147. https://numpy.org/doc/1.21/reference/generated/numpy.vstack.html#numpy.vstack
 148. https://numpy.org/doc/1.21/reference/generated/numpy.concatenate.html#numpy.concatenate
 149. https://numpy.org/doc/1.21/reference/generated/numpy.r_.html#numpy.r_
 150. https://numpy.org/doc/1.21/reference/generated/numpy.c_.html#numpy.c_
 151. https://numpy.org/doc/1.21/reference/generated/numpy.r_.html#numpy.r_
 152. https://numpy.org/doc/1.21/reference/generated/numpy.c_.html#numpy.c_
 153. https://numpy.org/doc/1.21/reference/generated/numpy.vstack.html#numpy.vstack
 154. https://numpy.org/doc/1.21/reference/generated/numpy.hstack.html#numpy.hstack
 155. https://numpy.org/doc/1.21/reference/generated/numpy.hstack.html#numpy.hstack
 156. https://numpy.org/doc/1.21/reference/generated/numpy.vstack.html#numpy.vstack
 157. https://numpy.org/doc/1.21/reference/generated/numpy.column_stack.html#numpy.column_stack
 158. https://numpy.org/doc/1.21/reference/generated/numpy.concatenate.html#numpy.concatenate
 159. https://numpy.org/doc/1.21/reference/generated/numpy.c_.html#numpy.c_
 160. https://numpy.org/doc/1.21/reference/generated/numpy.r_.html#numpy.r_
 161. https://numpy.org/doc/1.21/user/quickstart.html#splitting-one-array-into-several-smaller-ones
 162. https://numpy.org/doc/1.21/reference/generated/numpy.hsplit.html#numpy.hsplit
 163. https://numpy.org/doc/1.21/reference/generated/numpy.vsplit.html#numpy.vsplit
 164. https://numpy.org/doc/1.21/reference/generated/numpy.array_split.html#numpy.array_split
 165. https://numpy.org/doc/1.21/user/quickstart.html#copies-and-views
 166. https://numpy.org/doc/1.21/user/quickstart.html#no-copy-at-all
 167. https://numpy.org/doc/1.21/user/quickstart.html#view-or-shallow-copy
 168. https://numpy.org/doc/1.21/user/quickstart.html#deep-copy
 169. https://numpy.org/doc/1.21/user/quickstart.html#functions-and-methods-overview
 170. https://numpy.org/doc/1.21/reference/routines.html#routines
 171. https://numpy.org/doc/1.21/reference/generated/numpy.arange.html#numpy.arange
 172. https://numpy.org/doc/1.21/reference/generated/numpy.array.html#numpy.array
 173. https://numpy.org/doc/1.21/reference/generated/numpy.copy.html#numpy.copy
 174. https://numpy.org/doc/1.21/reference/generated/numpy.empty.html#numpy.empty
 175. https://numpy.org/doc/1.21/reference/generated/numpy.empty_like.html#numpy.empty_like
 176. https://numpy.org/doc/1.21/reference/generated/numpy.eye.html#numpy.eye
 177. https://numpy.org/doc/1.21/reference/generated/numpy.fromfile.html#numpy.fromfile
 178. https://numpy.org/doc/1.21/reference/generated/numpy.fromfunction.html#numpy.fromfunction
 179. https://numpy.org/doc/1.21/reference/generated/numpy.identity.html#numpy.identity
 180. https://numpy.org/doc/1.21/reference/generated/numpy.linspace.html#numpy.linspace
 181. https://numpy.org/doc/1.21/reference/generated/numpy.logspace.html#numpy.logspace
 182. https://numpy.org/doc/1.21/reference/generated/numpy.mgrid.html#numpy.mgrid
 183. https://numpy.org/doc/1.21/reference/generated/numpy.ogrid.html#numpy.ogrid
 184. https://numpy.org/doc/1.21/reference/generated/numpy.ones.html#numpy.ones
 185. https://numpy.org/doc/1.21/reference/generated/numpy.ones_like.html#numpy.ones_like
 186. https://numpy.org/doc/1.21/reference/generated/numpy.r_.html#numpy.r_
 187. https://numpy.org/doc/1.21/reference/generated/numpy.zeros.html#numpy.zeros
 188. https://numpy.org/doc/1.21/reference/generated/numpy.zeros_like.html#numpy.zeros_like
 189. https://numpy.org/doc/1.21/reference/generated/numpy.ndarray.astype.html#numpy.ndarray.astype
 190. https://numpy.org/doc/1.21/reference/generated/numpy.atleast_1d.html#numpy.atleast_1d
 191. https://numpy.org/doc/1.21/reference/generated/numpy.atleast_2d.html#numpy.atleast_2d
 192. https://numpy.org/doc/1.21/reference/generated/numpy.atleast_3d.html#numpy.atleast_3d
 193. https://numpy.org/doc/1.21/reference/generated/numpy.mat.html#numpy.mat
 194. https://numpy.org/doc/1.21/reference/generated/numpy.array_split.html#numpy.array_split
 195. https://numpy.org/doc/1.21/reference/generated/numpy.column_stack.html#numpy.column_stack
 196. https://numpy.org/doc/1.21/reference/generated/numpy.concatenate.html#numpy.concatenate
 197. https://numpy.org/doc/1.21/reference/generated/numpy.diagonal.html#numpy.diagonal
 198. https://numpy.org/doc/1.21/reference/generated/numpy.dsplit.html#numpy.dsplit
 199. https://numpy.org/doc/1.21/reference/generated/numpy.dstack.html#numpy.dstack
 200. https://numpy.org/doc/1.21/reference/generated/numpy.hsplit.html#numpy.hsplit
 201. https://numpy.org/doc/1.21/reference/generated/numpy.hstack.html#numpy.hstack
 202. https://numpy.org/doc/1.21/reference/generated/numpy.ndarray.item.html#numpy.ndarray.item
 203. https://numpy.org/doc/1.21/reference/constants.html#numpy.newaxis
 204. https://numpy.org/doc/1.21/reference/generated/numpy.ravel.html#numpy.ravel
 205. https://numpy.org/doc/1.21/reference/generated/numpy.repeat.html#numpy.repeat
 206. https://numpy.org/doc/1.21/reference/generated/numpy.reshape.html#numpy.reshape
 207. https://numpy.org/doc/1.21/reference/generated/numpy.resize.html#numpy.resize
 208. https://numpy.org/doc/1.21/reference/generated/numpy.squeeze.html#numpy.squeeze
 209. https://numpy.org/doc/1.21/reference/generated/numpy.swapaxes.html#numpy.swapaxes
 210. https://numpy.org/doc/1.21/reference/generated/numpy.take.html#numpy.take
 211. https://numpy.org/doc/1.21/reference/generated/numpy.transpose.html#numpy.transpose
 212. https://numpy.org/doc/1.21/reference/generated/numpy.vsplit.html#numpy.vsplit
 213. https://numpy.org/doc/1.21/reference/generated/numpy.vstack.html#numpy.vstack
 214. https://numpy.org/doc/1.21/reference/generated/numpy.all.html#numpy.all
 215. https://numpy.org/doc/1.21/reference/generated/numpy.any.html#numpy.any
 216. https://numpy.org/doc/1.21/reference/generated/numpy.nonzero.html#numpy.nonzero
 217. https://numpy.org/doc/1.21/reference/generated/numpy.where.html#numpy.where
 218. https://numpy.org/doc/1.21/reference/generated/numpy.argmax.html#numpy.argmax
 219. https://numpy.org/doc/1.21/reference/generated/numpy.argmin.html#numpy.argmin
 220. https://numpy.org/doc/1.21/reference/generated/numpy.argsort.html#numpy.argsort
 221. https://docs.python.org/dev/library/functions.html#max
 222. https://docs.python.org/dev/library/functions.html#min
 223. https://numpy.org/doc/1.21/reference/generated/numpy.ptp.html#numpy.ptp
 224. https://numpy.org/doc/1.21/reference/generated/numpy.searchsorted.html#numpy.searchsorted
 225. https://numpy.org/doc/1.21/reference/generated/numpy.sort.html#numpy.sort
 226. https://numpy.org/doc/1.21/reference/generated/numpy.choose.html#numpy.choose
 227. https://numpy.org/doc/1.21/reference/generated/numpy.compress.html#numpy.compress
 228. https://numpy.org/doc/1.21/reference/generated/numpy.cumprod.html#numpy.cumprod
 229. https://numpy.org/doc/1.21/reference/generated/numpy.cumsum.html#numpy.cumsum
 230. https://numpy.org/doc/1.21/reference/generated/numpy.inner.html#numpy.inner
 231. https://numpy.org/doc/1.21/reference/generated/numpy.ndarray.fill.html#numpy.ndarray.fill
 232. https://numpy.org/doc/1.21/reference/generated/numpy.imag.html#numpy.imag
 233. https://numpy.org/doc/1.21/reference/generated/numpy.prod.html#numpy.prod
 234. https://numpy.org/doc/1.21/reference/generated/numpy.put.html#numpy.put
 235. https://numpy.org/doc/1.21/reference/generated/numpy.putmask.html#numpy.putmask
 236. https://numpy.org/doc/1.21/reference/generated/numpy.real.html#numpy.real
 237. https://numpy.org/doc/1.21/reference/generated/numpy.sum.html#numpy.sum
 238. https://numpy.org/doc/1.21/reference/generated/numpy.cov.html#numpy.cov
 239. https://numpy.org/doc/1.21/reference/generated/numpy.mean.html#numpy.mean
 240. https://numpy.org/doc/1.21/reference/generated/numpy.std.html#numpy.std
 241. https://numpy.org/doc/1.21/reference/generated/numpy.var.html#numpy.var
 242. https://numpy.org/doc/1.21/reference/generated/numpy.cross.html#numpy.cross
 243. https://numpy.org/doc/1.21/reference/generated/numpy.dot.html#numpy.dot
 244. https://numpy.org/doc/1.21/reference/generated/numpy.outer.html#numpy.outer
 245. https://numpy.org/doc/1.21/reference/generated/numpy.linalg.svd.html#numpy.linalg.svd
 246. https://numpy.org/doc/1.21/reference/generated/numpy.vdot.html#numpy.vdot
 247. https://numpy.org/doc/1.21/user/quickstart.html#less-basic
 248. https://numpy.org/doc/1.21/user/quickstart.html#broadcasting-rules
 249. https://numpy.org/doc/1.21/user/basics.broadcasting.html#basics-broadcasting
 250. https://numpy.org/doc/1.21/user/quickstart.html#advanced-indexing-and-index-tricks
 251. https://numpy.org/doc/1.21/user/quickstart.html#indexing-with-arrays-of-indices
 252. https://numpy.org/doc/1.21/user/quickstart.html#indexing-with-boolean-arrays
 253. https://en.wikipedia.org/wiki/Mandelbrot_set
 254. https://numpy.org/doc/1.21/user/quickstart.html#the-ix-function
 255. https://numpy.org/doc/1.21/reference/generated/numpy.ix_.html#numpy.ix_
 256. https://numpy.org/doc/1.21/user/quickstart.html#broadcasting-rules
 257. https://numpy.org/doc/1.21/user/quickstart.html#indexing-with-strings
 258. https://numpy.org/doc/1.21/user/basics.rec.html#structured-arrays
 259. https://numpy.org/doc/1.21/user/quickstart.html#tricks-and-tips
 260. https://numpy.org/doc/1.21/user/quickstart.html#automatic-reshaping
 261. https://numpy.org/doc/1.21/user/quickstart.html#vector-stacking
 262. https://numpy.org/doc/1.21/user/numpy-for-matlab-users.html
 263. https://numpy.org/doc/1.21/user/quickstart.html#histograms
 264. https://numpy.org/doc/1.21/user/quickstart.html#further-reading
 265. https://docs.python.org/tutorial/
 266. https://docs.python.org/dev/distutils/commandref.html#reference
 267. https://docs.scipy.org/doc/scipy/reference/tutorial/index.html
 268. https://scipy-lectures.org/
 269. http://mathesaurus.sf.net/
 270. https://numpy.org/doc/1.21/user/tutorial-svd.html
 271. https://numpy.org/doc/1.21/user/whatisnumpy.html
 272. https://numpy.org/doc/1.21/user/absolute_beginners.html
 273. https://www.sphinx-doc.org/
